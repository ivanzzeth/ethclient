// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package safel2contract

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// Safel2contractMetaData contains all meta data concerning the Safel2contract contract.
var Safel2contractMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"fallback\",\"stateMutability\":\"nonpayable\"},{\"type\":\"receive\",\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"VERSION\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"string\",\"internalType\":\"string\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"addOwnerWithThreshold\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_threshold\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"approveHash\",\"inputs\":[{\"name\":\"hashToApprove\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"approvedHashes\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"changeThreshold\",\"inputs\":[{\"name\":\"_threshold\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"checkNSignatures\",\"inputs\":[{\"name\":\"dataHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signatures\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"requiredSignatures\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"checkSignatures\",\"inputs\":[{\"name\":\"dataHash\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"signatures\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"disableModule\",\"inputs\":[{\"name\":\"prevModule\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"module\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"domainSeparator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"enableModule\",\"inputs\":[{\"name\":\"module\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"encodeTransactionData\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"operation\",\"type\":\"uint8\",\"internalType\":\"enumEnum.Operation\"},{\"name\":\"safeTxGas\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"baseGas\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"gasPrice\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"gasToken\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"refundReceiver\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_nonce\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"execTransaction\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"operation\",\"type\":\"uint8\",\"internalType\":\"enumEnum.Operation\"},{\"name\":\"safeTxGas\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"baseGas\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"gasPrice\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"gasToken\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"refundReceiver\",\"type\":\"address\",\"internalType\":\"addresspayable\"},{\"name\":\"signatures\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"payable\"},{\"type\":\"function\",\"name\":\"execTransactionFromModule\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"operation\",\"type\":\"uint8\",\"internalType\":\"enumEnum.Operation\"}],\"outputs\":[{\"name\":\"success\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"execTransactionFromModuleReturnData\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"operation\",\"type\":\"uint8\",\"internalType\":\"enumEnum.Operation\"}],\"outputs\":[{\"name\":\"success\",\"type\":\"bool\",\"internalType\":\"bool\"},{\"name\":\"returnData\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getChainId\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getModulesPaginated\",\"inputs\":[{\"name\":\"start\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"pageSize\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"array\",\"type\":\"address[]\",\"internalType\":\"address[]\"},{\"name\":\"next\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getOwners\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address[]\",\"internalType\":\"address[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStorageAt\",\"inputs\":[{\"name\":\"offset\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"length\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getThreshold\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTransactionHash\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"operation\",\"type\":\"uint8\",\"internalType\":\"enumEnum.Operation\"},{\"name\":\"safeTxGas\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"baseGas\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"gasPrice\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"gasToken\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"refundReceiver\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_nonce\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"isModuleEnabled\",\"inputs\":[{\"name\":\"module\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"isOwner\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"nonce\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"removeOwner\",\"inputs\":[{\"name\":\"prevOwner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"owner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"_threshold\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"requiredTxGas\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"operation\",\"type\":\"uint8\",\"internalType\":\"enumEnum.Operation\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setFallbackHandler\",\"inputs\":[{\"name\":\"handler\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setGuard\",\"inputs\":[{\"name\":\"guard\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setup\",\"inputs\":[{\"name\":\"_owners\",\"type\":\"address[]\",\"internalType\":\"address[]\"},{\"name\":\"_threshold\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"to\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"},{\"name\":\"fallbackHandler\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"paymentToken\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"payment\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"paymentReceiver\",\"type\":\"address\",\"internalType\":\"addresspayable\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"signedMessages\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"simulateAndRevert\",\"inputs\":[{\"name\":\"targetContract\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"calldataPayload\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"swapOwner\",\"inputs\":[{\"name\":\"prevOwner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"oldOwner\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"AddedOwner\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ApproveHash\",\"inputs\":[{\"name\":\"approvedHash\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"owner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ChangedFallbackHandler\",\"inputs\":[{\"name\":\"handler\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ChangedGuard\",\"inputs\":[{\"name\":\"guard\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ChangedThreshold\",\"inputs\":[{\"name\":\"threshold\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"DisabledModule\",\"inputs\":[{\"name\":\"module\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"EnabledModule\",\"inputs\":[{\"name\":\"module\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ExecutionFailure\",\"inputs\":[{\"name\":\"txHash\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"payment\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ExecutionFromModuleFailure\",\"inputs\":[{\"name\":\"module\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ExecutionFromModuleSuccess\",\"inputs\":[{\"name\":\"module\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"ExecutionSuccess\",\"inputs\":[{\"name\":\"txHash\",\"type\":\"bytes32\",\"indexed\":false,\"internalType\":\"bytes32\"},{\"name\":\"payment\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"RemovedOwner\",\"inputs\":[{\"name\":\"owner\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SafeModuleTransaction\",\"inputs\":[{\"name\":\"module\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"to\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"},{\"name\":\"operation\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"enumEnum.Operation\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SafeMultiSigTransaction\",\"inputs\":[{\"name\":\"to\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"data\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"},{\"name\":\"operation\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"enumEnum.Operation\"},{\"name\":\"safeTxGas\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"baseGas\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"gasPrice\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"gasToken\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"refundReceiver\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"addresspayable\"},{\"name\":\"signatures\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"},{\"name\":\"additionalInfo\",\"type\":\"bytes\",\"indexed\":false,\"internalType\":\"bytes\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SafeReceived\",\"inputs\":[{\"name\":\"sender\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SafeSetup\",\"inputs\":[{\"name\":\"initiator\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"owners\",\"type\":\"address[]\",\"indexed\":false,\"internalType\":\"address[]\"},{\"name\":\"threshold\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"},{\"name\":\"initializer\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"},{\"name\":\"fallbackHandler\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"address\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"SignMsg\",\"inputs\":[{\"name\":\"msgHash\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"}],\"anonymous\":false}]",
	Bin: "0x60808060405234601a576001600455612ea8908161001f8239f35b5f80fdfe60806040526004361015610029575b361561001f57341561241c575b5f80fd5b6100276123ee565b005b5f3560e01c80630d582f131461021857806312fb68e0146102135780632d9ad53d1461020e5780632f54bf6e146102095780633408e47014610204578063468721a7146101ff5780635229073f146101fa5780635624b25b146101f55780635ae6bd37146101f0578063610b5925146101eb578063694e80c3146101e65780636a761202146101e15780637d832974146101dc578063934f3a11146101d7578063a0e67e2b146101d2578063affed0e0146101cd578063b4faba09146101c8578063b63e800d146101c3578063c4ca3a9c146101be578063cc2f8452146101b9578063d4d9bdcd146101b4578063d8d11f78146101af578063e009cfde146101aa578063e19a9dd9146101a5578063e318b52b146101a0578063e75235b81461019b578063e86637db14610196578063f08a032314610191578063f698da251461018c578063f8dc5dd9146101875763ffa1ad740361000e57611542565b61144d565b61142b565b6113ae565b611386565b611369565b6111b6565b611139565b610fdb565b610fa8565b610e5e565b610d94565b610cc3565b610c17565b610bbb565b610b9e565b610b13565b610a67565b610a1d565b610979565b6108d6565b6107c0565b610796565b61070c565b6106b1565b610667565b6105f2565b61058a565b61052b565b6104c8565b610264565b6001600160a01b0381160361001b57565b60e4359061023b8261021d565b565b6044359061023b8261021d565b6084359061023b8261021d565b60a4359061023b8261021d565b3461001b57604036600319011261001b576004356102818161021d565b7f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea266103ef602435926102b161246b565b6102d46001600160a01b0382168015159081610411575b81610406575b506115a1565b6103176103116103056102f8846001600160a01b03165f52600260205260405f2090565b546001600160a01b031690565b6001600160a01b031690565b156115ec565b60015f52600260205261038f61034c7fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e06102f8565b610367836001600160a01b03165f52600260205260405f2090565b906001600160a01b031673ffffffffffffffffffffffffffffffffffffffff19825416179055565b60015f5260026020526103c2817fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e0610367565b6103d56103d060035461164b565b600355565b6040516001600160a01b0390911681529081906020820190565b0390a180600454036103fd57005b61002790611db0565b90503014155f6102ce565b600181141591506102c8565b634e487b7160e01b5f52604160045260245ffd5b90601f8019910116810190811067ffffffffffffffff82111761045357604052565b61041d565b67ffffffffffffffff811161045357601f01601f191660200190565b92919261048082610458565b9161048e6040519384610431565b82948184528183011161001b578281602093845f960137010152565b9080601f8301121561001b578160206104c593359101610474565b90565b3461001b57608036600319011261001b5760043560243567ffffffffffffffff811161001b576104fc9036906004016104aa565b906044359167ffffffffffffffff831161001b576105216100279336906004016104aa565b90606435926118e1565b3461001b57602036600319011261001b576001600160a01b036004356105508161021d565b168060011415908161056b575b506040519015158152602090f35b90505f5260016020526001600160a01b0360405f20541615155f61055d565b3461001b57602036600319011261001b576001600160a01b036004356105af8161021d565b16600181141590816105c957506040519015158152602090f35b90505f5260026020526001600160a01b0360405f20541615155f61055d565b5f91031261001b57565b3461001b575f36600319011261001b576020604051468152f35b60643590600282101561001b57565b608060031982011261001b576004356106338161021d565b91602435916044359067ffffffffffffffff821161001b57610657916004016104aa565b90606435600281101561001b5790565b3461001b57602061068361067a3661061b565b92919091611c0c565b6040519015158152f35b805180835260209291819084018484015e5f828201840152601f01601f1916010190565b3461001b576106c261067a3661061b565b6040519060203d8301016040523d82523d5f602084013e6106f76040519283921515835260406020840152604083019061068d565b0390f35b9060206104c592818152019061068d565b3461001b57604036600319011261001b576004356024358060051b91818304602014821517156107915761073f83610458565b9261074d6040519485610431565b80845261075c601f1991610458565b013660208501375f5b82811061077a57604051806106f786826106fb565b8060019183015460208260051b8701015201610765565b611637565b3461001b57602036600319011261001b576004355f526007602052602060405f2054604051908152f35b3461001b57602036600319011261001b577fecdf3a3effea5783a3c4c2140e677577666428d44ed9d474a0b3a4c9943f84406108c66004356108018161021d565b61080961246b565b6001600160a01b038116801515806108cb575b61082590611d1a565b5f5260016020526108436001600160a01b0360405f20541615611d65565b60015f8190526020526108936108787fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f6102f8565b610367836001600160a01b03165f52600160205260405f2090565b60015f8190526020526103d5817fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f610367565b0390a1005b50600181141561081c565b3461001b57602036600319011261001b577f610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c93602060043561091561246b565b610923600354821115611e04565b6109306001821015611e4f565b80600455604051908152a1005b9181601f8401121561001b5782359167ffffffffffffffff831161001b576020838186019501011161001b57565b610104359061023b8261021d565b61014036600319011261001b576004356109928161021d565b6024359060443567ffffffffffffffff811161001b576109b690369060040161093d565b6109c192919261060c565b60c43560a4356084356109d261022e565b936109db61096b565b95610124359867ffffffffffffffff8a1161001b576106f79a610a05610a0b9b36906004016104aa565b99611eba565b60405190151581529081906020820190565b3461001b57604036600319011261001b57600435610a3a8161021d565b6001600160a01b0360243591165f52600860205260405f20905f52602052602060405f2054604051908152f35b3461001b57606036600319011261001b5760043560243567ffffffffffffffff811161001b57610a9b9036906004016104aa565b906044359167ffffffffffffffff831161001b57610ac06100279336906004016104aa565b91611fb5565b90602080835192838152019201905f5b818110610ae35750505090565b82516001600160a01b0316845260209384019390920191600101610ad6565b9060206104c5928181520190610ac6565b3461001b575f36600319011261001b57610b2e600354612025565b5f60015f5260026020526001600160a01b038060405f2054165b1660018114610b905780610b5c8385612057565b525f5260026020526001600160a01b03610b8a610b8460405f206001600160a01b0390541690565b9261164b565b91610b48565b604051806106f78582610b02565b3461001b575f36600319011261001b576020600554604051908152f35b3461001b57604036600319011261001b57600435610bd88161021d565b60243567ffffffffffffffff811161001b575f91610bfb839236906004016104aa565b90602082519201905af45f523d6020523d5f60403e60403d015ffd5b3461001b5761010036600319011261001b5760043567ffffffffffffffff811161001b573660238201121561001b5780600401359067ffffffffffffffff821161001b573660248360051b8301011161001b5760243591610c7661023d565b926064359367ffffffffffffffff851161001b57610c9b61002795369060040161093d565b90610ca461024a565b92610cad610257565b9460c435966024610cbc61022e565b99016120eb565b3461001b57608036600319011261001b57600435610ce08161021d565b60443560243567ffffffffffffffff821161001b57610d06610d2692369060040161093d565b919093610d1161060c565b91610d205a965a953691610474565b91612e1e565b1561001b575a810390811161079157610d699060405190602082015260208152610d51604082610431565b60405191829162461bcd60e51b8352600483016106fb565b0390fd5b906001600160a01b03610d8d602092959495604085526040850190610ac6565b9416910152565b3461001b57604036600319011261001b57600435610db18161021d565b602435610dbd81612025565b906001600160a01b035f93165f5260016020526001600160a01b0360405f2054165b6001600160a01b03811680151580610e53575b80610e4a575b15610e36576102f8610e3092610e2a92610e128888612057565b526001600160a01b03165f52600160205260405f2090565b9361164b565b92610ddf565b50828481526106f760405192839283610d6d565b50828510610df8565b506001811415610df2565b3461001b57602036600319011261001b57600435335f5260026020526001600160a01b0360405f20541615610eea57610ec2610ebc82610eaf336001600160a01b03165f52600860205260405f2090565b905f5260205260405f2090565b60019055565b33907ff2a0eb156472d1440255b0d7c1e19cc07115d1051fe605b0dce69acfec884d9c5f80a3005b606460405162461bcd60e51b815260206004820152600560248201527f47533033300000000000000000000000000000000000000000000000000000006044820152fd5b61014060031982011261001b57600435610f478161021d565b91602435916044359067ffffffffffffffff821161001b57610f6b9160040161093d565b9091606435600281101561001b57906084359060a4359060c4359060e435610f928161021d565b9061010435610fa08161021d565b906101243590565b3461001b576020610fcd610fbb36610f2e565b9998909897919796929695939561226b565b818151910120604051908152f35b3461001b57604036600319011261001b57600435610ff88161021d565b602435906110058261021d565b61100d61246b565b6001600160a01b0382168015158061112e575b61102990611d1a565b6001600160a01b0382165f5260016020526001600160a01b0360405f205416036110ea57816110af6108c6926103676110976102f87faab4fa2b463f581b2b32cb3b7e3b704b9ce37cc209b5fb4d77e593ace4054276976001600160a01b03165f52600160205260405f2090565b916001600160a01b03165f52600160205260405f2090565b6103d56110cd826001600160a01b03165f52600160205260405f2090565b73ffffffffffffffffffffffffffffffffffffffff198154169055565b606460405162461bcd60e51b815260206004820152600560248201527f47533130330000000000000000000000000000000000000000000000000000006044820152fd5b506001811415611020565b3461001b57602036600319011261001b577f1151116914515bc0891ff9047a6cb32cf902546f83066499bcf8ba33d2353fa260206004356111798161021d565b61118161246b565b807f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8556001600160a01b0360405191168152a1005b3461001b57606036600319011261001b577f9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea266108c66103677ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf61134160043561121e8161021d565b6113236024359161122e8361021d565b60443595869161123d8361021d565b61124561246b565b6112666001600160a01b0384168015159081610411578161040657506115a1565b61128a6103116103056102f8866001600160a01b03165f52600260205260405f2090565b6112d06001600160a01b0386168015158061135e575b6112a9906115a1565b6112ca6103056102f8856001600160a01b03165f52600260205260405f2090565b14612220565b61130c6112f16102f8876001600160a01b03165f52600260205260405f2090565b610367856001600160a01b03165f52600260205260405f2090565b6001600160a01b03165f52600260205260405f2090565b6103d56110cd826001600160a01b03165f52600260205260405f2090565b0390a16040516001600160a01b0390911681529081906020820190565b5060018114156112a0565b3461001b575f36600319011261001b576020600454604051908152f35b3461001b576106f761139a610fbb36610f2e565b60405191829160208352602083019061068d565b3461001b57602036600319011261001b577f5ac6c46c93c8d0e53714ba3b53db3e7c046da994313d7ed0d192028bc7c228b060206004356113ee8161021d565b6113f661246b565b807f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5556001600160a01b0360405191168152a1005b3461001b575f36600319011261001b576020611445612396565b604051908152f35b3461001b57606036600319011261001b5760043561146a8161021d565b7ff8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf6103ef60243561149a8161021d565b611516604435946114a961246b565b6114bf866114b8600354612202565b1015611e04565b6114dd6001600160a01b0384168015158061135e576112a9906115a1565b6103676114fe6102f8856001600160a01b03165f52600260205260405f2090565b916001600160a01b03165f52600260205260405f2090565b6115346110cd826001600160a01b03165f52600260205260405f2090565b6103d56103d06003546123e2565b3461001b575f36600319011261001b576106f7604051611563604082610431565b600581527f312e332e30000000000000000000000000000000000000000000000000000000602082015260405191829160208352602083019061068d565b156115a857565b606460405162461bcd60e51b815260206004820152600560248201527f47533230330000000000000000000000000000000000000000000000000000006044820152fd5b156115f357565b606460405162461bcd60e51b815260206004820152600560248201527f47533230340000000000000000000000000000000000000000000000000000006044820152fd5b634e487b7160e01b5f52601160045260245ffd5b5f1981146107915760010190565b1561166057565b606460405162461bcd60e51b815260206004820152600560248201527f47533032300000000000000000000000000000000000000000000000000000006044820152fd5b6040513d5f823e3d90fd5b60ff6003199116019060ff821161079157565b156116c957565b606460405162461bcd60e51b815260206004820152600560248201527f47533032350000000000000000000000000000000000000000000000000000006044820152fd5b1561171457565b606460405162461bcd60e51b815260206004820152600560248201527f47533032310000000000000000000000000000000000000000000000000000006044820152fd5b1561175f57565b606460405162461bcd60e51b815260206004820152600560248201527f47533032320000000000000000000000000000000000000000000000000000006044820152fd5b156117aa57565b606460405162461bcd60e51b815260206004820152600560248201527f47533032330000000000000000000000000000000000000000000000000000006044820152fd5b9081602091031261001b57517fffffffff000000000000000000000000000000000000000000000000000000008116810361001b5790565b909161183d6104c59360408452604084019061068d565b91602081840391015261068d565b1561185257565b606460405162461bcd60e51b815260206004820152600560248201527f47533032340000000000000000000000000000000000000000000000000000006044820152fd5b1561189d57565b606460405162461bcd60e51b815260206004820152600560248201527f47533032360000000000000000000000000000000000000000000000000000006044820152fd5b9290926118f983516118f2846124d6565b1115611659565b5f90815b83831061190c57505050505050565b61192c8386906041020160208101519060ff604160408301519201511692565b9160ff811680611a995750509160206001600160a01b036119b294169261195d611955896124d6565b82101561170d565b6119726119698261254a565b8a511015611758565b61199761198e83838c01019261198984519161254a565b61255f565b8a5110156117a3565b604051809581926320c13b0b60e01b83528c60048401611826565b0381855afa908115611a9457611a006320c13b0b60e01b7fffffffff00000000000000000000000000000000000000000000000000000000611a22946001975f91611a66575b50161461184b565b6001600160a01b03808416911681119081611a35575b81611a2a575b50611896565b9201916118fd565b84915014155f611a1c565b90506001600160a01b03611a5d6102f8856001600160a01b03165f52600260205260405f2090565b16151590611a16565b611a87915060203d8111611a8d575b611a7f8183610431565b8101906117ee565b5f6119f8565b503d611a75565b6116a4565b9192909160018103611afe5750505090611a226001600160a01b0360019316918233148015611ad1575b611acc906116c2565b611a00565b50611acc611af486610eaf866001600160a01b03165f52600860205260405f2090565b5415159050611ac3565b9160209391601e5f94118414611bae57611b9290611b6b60405187810190611b6281611b548d85603c917f19457468657265756d205369676e6564204d6573736167653a0a3332000000008252601c8201520190565b03601f198101835282610431565b519020936116af565b93604051948594859094939260ff6060936080840197845216602083015260408201520152565b838052039060015afa15611a9457600190611a225f5191611a00565b6040805188815260ff939093166020840152820192909252606081019190915281805260809060015afa15611a9457600190611a225f5191611a00565b906002821015611bf85752565b634e487b7160e01b5f52602160045260245ffd5b91611c8e93917fb648d3644f584ed1c2232d53c46d87e693586486ad0d1175f8656013110b714e6040513381526001600160a01b038616602082015282604082015260a0606082015280611c6360a082018661068d565b611c706080830188611beb565b0390a1600133141580611ce4575b611c8790612573565b5a93612e1e565b8015611cbc57337f6895c13664aa4f67288b25d7a21d7aaa34916e355fb9b6fae0a139a9085becb85f80a290565b337facd2c8702804128fdb0db2bb49f6d127dd0181c13fd45dbfe16de0930e2bd3755f80a290565b50335f908152600160205260409020546001600160a01b03161515611c7e565b908160061b918083046040149015171561079157565b15611d2157565b606460405162461bcd60e51b815260206004820152600560248201527f47533130310000000000000000000000000000000000000000000000000000006044820152fd5b15611d6c57565b606460405162461bcd60e51b815260206004820152600560248201527f47533130320000000000000000000000000000000000000000000000000000006044820152fd5b60207f610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c9391611ddc61246b565b611dea600354821115611e04565b611df76001821015611e4f565b80600455604051908152a1565b15611e0b57565b606460405162461bcd60e51b815260206004820152600560248201527f47533230310000000000000000000000000000000000000000000000000000006044820152fd5b15611e5657565b606460405162461bcd60e51b815260206004820152600560248201527f47533230320000000000000000000000000000000000000000000000000000006044820152fd5b908060209392818452848401375f828201840152601f01601f1916010190565b99989796959493929190600554600454604051916020830152336040830152606082015260608152611eed608082610431565b8b604051916001600160a01b0383921682528360208301526040820161016090528c6101608301611f1f908888611e9a565b611f2c606085018a611beb565b8960808501528a60a08501528b60c08501526001600160a01b038d1660e08501528d6101008501611f64916001600160a01b03169052565b838103610120850152611f769161068d565b828103610140840152611f889161068d565b037f66753cd2356569ee081232e3be8909b950e0a76c1f8460c3a5e3c2be32b11bed91a16104c59a6126cc565b91600454918215611fc95761023b936118e1565b606460405162461bcd60e51b815260206004820152600560248201527f47533030310000000000000000000000000000000000000000000000000000006044820152fd5b67ffffffffffffffff81116104535760051b60200190565b9061202f8261200d565b61203c6040519182610431565b828152809261204d601f199161200d565b0190602036910137565b805182101561206b5760209160051b010190565b634e487b7160e01b5f52603260045260245ffd5b9391959492958060808601608087525260a0850191905f5b8181106120c157505050916001600160a01b03809260609497602087015216604085015216910152565b9091926020806001926001600160a01b0387356120dd8161021d565b168152019401929101612097565b97929399989196909594996120ff8761200d565b9a61210d6040519c8d610431565b878c5260208c019b8860051b8b0136811161001b57809d8c9e8f5b106121e55750507f141df868a6331af528e38c83b7aa03edc19be66e37ae67f9285bf4f8e3c6a1a89a9b9c506121a197969594939261218a9261216e8c612184946129cb565b6001600160a01b0389166121b8575b3691610474565b85612b42565b826121a6575b50505060405194859433988661207f565b0390a2565b6121af92612c92565b505f8080612190565b6121e0897f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d555565b61217d565b60208f918192356121f58161021d565b8152019e019d818f612128565b5f1981019190821161079157565b6109c31981019190821161079157565b1561222757565b606460405162461bcd60e51b815260206004820152600560248201527f47533230350000000000000000000000000000000000000000000000000000006044820152fd5b99979593919098969492369061228092610474565b805190602001206040519860208a019a7fbb8310d486368db6bd6f849402fdd73ad53d316b5a4b2644ad6efe0f941286d88c526001600160a01b031660408b015260608a0152608089015260a088016122d891611beb565b60c087015260e08601526101008501526001600160a01b03166101208401526001600160a01b0316610140830152610160820152610160815261231d61018082610431565b519020612328612396565b6040517f190000000000000000000000000000000000000000000000000000000000000060208201527f0100000000000000000000000000000000000000000000000000000000000000602182015260228101919091526042808201929092529081526104c5606282610431565b60405160208101907f47e79534a245952e8b16893a336b85a3d9ea9fa8c573f3d803afb92a794692188252466040820152306060820152606081526123dc608082610431565b51902090565b8015610791575f190190565b6040513481527f3d0ce9bfc3ed7d6862dbb28b2dea94561fe714a1b4d019aa8af39730d1ad7c3d60203392a2565b7f6c9a6c4a39284e37ed1cf53d337577d14212a4870fb976a4366c693b939918d5548015610027575f8091368280373360601b3652818060143601925af13d5f803e15612467573d5ff35b3d5ffd5b30330361247457565b606460405162461bcd60e51b815260206004820152600560248201527f47533033310000000000000000000000000000000000000000000000000000006044820152fd5b81156124c2570490565b634e487b7160e01b5f52601260045260245ffd5b80156124ff576041810290808204604103610791576124f7604191836124b8565b0361001b5790565b505f90565b9081156125265780820291808304821481151715610791576124f790836124b8565b50505f90565b906109c4820180921161079157565b906101f4820180921161079157565b602081019081811161079157811061001b5790565b9081019081811161079157811061001b5790565b1561257a57565b606460405162461bcd60e51b815260206004820152600560248201527f47533130340000000000000000000000000000000000000000000000000000006044820152fd5b9a95968b9761260c9d9e9d6001600160a01b039b949760606126046101409f99988f9b99610d8d9f988f8e9c8d6101609316825260208201528160408201520191611e9a565b9b0190611beb565b60808d015260a08c015260c08b01521660e08901521661010087015285820361012087015261068d565b1561263d57565b606460405162461bcd60e51b815260206004820152600560248201527f47533031300000000000000000000000000000000000000000000000000000006044820152fd5b1561268857565b606460405162461bcd60e51b815260206004820152600560248201527f47533031330000000000000000000000000000000000000000000000000000006044820152fd5b97938a9995919b9a9793838a888f9a969a898989898989600554996001600160a01b038b9916976126fc9a61226b565b906127069061164b565b600555805160208201209b61271b918d611fb5565b7f4a204f620c8c5ccdca3fd54d003badd85ba500436a431f0cbda4f558c93c34c8546001600160a01b0316998a1515998a6128f4575b50906127bb926127b3926127935a61278c6127876127786127718b611d04565b603f900490565b6127818b61252c565b90612e4d565b61253b565b1115612636565b5a9f610d2089159c8d5f146128ed576127ab5a612210565b953691610474565b9b5a90612e5e565b908b908c156128e3575b5080156128db575b6127d690612681565b5f95156128c7575b5050505050855f14612890576040805185815260208101929092527f442e715f626346e8c54381002da614f62bee8d27386535b2521ec8540898556e91a15b612825575050565b803b1561001b576040517f93271368000000000000000000000000000000000000000000000000000000008152600481019290925283151560248301525f908290604490829084905af18015611a945761287c5750565b8061288a5f61023b93610431565b806105e8565b6040805185815260208101929092527f23428b18acfb3ea64b08dc0c1d296ea9c09702c09083ca5272e64d115b687d2391a161281d565b6128d19550612db0565b5f808080806127de565b5085156127cd565b905015155f6127c5565b889561217d565b8b9291923b1561001b578b8f8b85859288958e8e8e8e8e6040519e8f9a8b9a7f75f0bb52000000000000000000000000000000000000000000000000000000008c52339960048d019b6129469c6125be565b03815a5f948591f1928315611a94576127bb946127b39461296c575b5091925092612751565b8061288a5f61297a93610431565b5f612962565b1561298757565b606460405162461bcd60e51b815260206004820152600560248201527f47533230300000000000000000000000000000000000000000000000000000006044820152fd5b6129d760045415612980565b6129e48151831115611e04565b6129f16001831015611e4f565b5f9260015b8251851015612aa357610367612a71600192612a22612a158988612057565b516001600160a01b031690565b928391612a4d6001600160a01b0384168015159081612a98575b81612a8d575b81612a7957506115a1565b61130c6103116103056102f8866001600160a01b03165f52600260205260405f2090565b9401936129f6565b90506001600160a01b03831614155f6102ce565b308114159150612a42565b888114159150612a3c565b612af291945091612aec612acc61023b95946001600160a01b03165f52600260205260405f2090565b600173ffffffffffffffffffffffffffffffffffffffff19825416179055565b51600355565b600455565b15612afe57565b606460405162461bcd60e51b815260206004820152600560248201527f47533030300000000000000000000000000000000000000000000000000000006044820152fd5b9060015f5260016020526001600160a01b0360405f205416612bb85760015f819052602052612b907fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f612acc565b6001600160a01b038216612ba2575050565b5f809161023b935a9060208351930191f4612af7565b606460405162461bcd60e51b815260206004820152600560248201527f47533130300000000000000000000000000000000000000000000000000000006044820152fd5b15612c0357565b606460405162461bcd60e51b815260206004820152600560248201527f47533031320000000000000000000000000000000000000000000000000000006044820152fd5b15612c4e57565b606460405162461bcd60e51b815260206004820152600560248201527f47533031310000000000000000000000000000000000000000000000000000006044820152fd5b9092916001600160a01b038116612daa575032925b6001600160a01b038116612d0857505f808080612cdc612cca8261023b9761255f565b3a6001108314612d0157600190612504565b809782908215612cf7575b6001600160a01b031690f1612c47565b6108fc9150612ce7565b3a90612504565b5f90612d206001612d1b8460209661255f565b612504565b94826040516001600160a01b03868201937fa9059cbb00000000000000000000000000000000000000000000000000000000855216602482015287604482015260448152612d6f606482610431565b519261270f195a01f13d8015612da057602014612d90575061023b5f612bfc565b61023b905f511590151715612bfc565b5061023b90612bfc565b92612ca7565b90919294936001600160a01b038116155f14612e18575032945b6001600160a01b038116612e0657505f80612cdc61023b95612dee8396849661255f565b903a81108414612dfe5790612504565b503a90612504565b90602093612d1b5f94612d209361255f565b94612dca565b9390936002841015611bf8575f948594600103612e41575060208351930191f490565b9060208451940192f190565b90808210612e59575090565b905090565b9081811161001b578103908111610791579056fea2646970667358221220c3faafda615d2b185acb9931c83d6fd29a6f397c213764e8701b7ab2b037a81664736f6c634300081c0033",
}

// Safel2contractABI is the input ABI used to generate the binding from.
// Deprecated: Use Safel2contractMetaData.ABI instead.
var Safel2contractABI = Safel2contractMetaData.ABI

// Safel2contractBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use Safel2contractMetaData.Bin instead.
var Safel2contractBin = Safel2contractMetaData.Bin

// DeploySafel2contract deploys a new Ethereum contract, binding an instance of Safel2contract to it.
func DeploySafel2contract(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Safel2contract, error) {
	parsed, err := Safel2contractMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(Safel2contractBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Safel2contract{Safel2contractCaller: Safel2contractCaller{contract: contract}, Safel2contractTransactor: Safel2contractTransactor{contract: contract}, Safel2contractFilterer: Safel2contractFilterer{contract: contract}}, nil
}

// Safel2contract is an auto generated Go binding around an Ethereum contract.
type Safel2contract struct {
	Safel2contractCaller     // Read-only binding to the contract
	Safel2contractTransactor // Write-only binding to the contract
	Safel2contractFilterer   // Log filterer for contract events
}

// Safel2contractCaller is an auto generated read-only Go binding around an Ethereum contract.
type Safel2contractCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Safel2contractTransactor is an auto generated write-only Go binding around an Ethereum contract.
type Safel2contractTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Safel2contractFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type Safel2contractFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// Safel2contractSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type Safel2contractSession struct {
	Contract     *Safel2contract   // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// Safel2contractCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type Safel2contractCallerSession struct {
	Contract *Safel2contractCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts         // Call options to use throughout this session
}

// Safel2contractTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type Safel2contractTransactorSession struct {
	Contract     *Safel2contractTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts         // Transaction auth options to use throughout this session
}

// Safel2contractRaw is an auto generated low-level Go binding around an Ethereum contract.
type Safel2contractRaw struct {
	Contract *Safel2contract // Generic contract binding to access the raw methods on
}

// Safel2contractCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type Safel2contractCallerRaw struct {
	Contract *Safel2contractCaller // Generic read-only contract binding to access the raw methods on
}

// Safel2contractTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type Safel2contractTransactorRaw struct {
	Contract *Safel2contractTransactor // Generic write-only contract binding to access the raw methods on
}

// NewSafel2contract creates a new instance of Safel2contract, bound to a specific deployed contract.
func NewSafel2contract(address common.Address, backend bind.ContractBackend) (*Safel2contract, error) {
	contract, err := bindSafel2contract(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Safel2contract{Safel2contractCaller: Safel2contractCaller{contract: contract}, Safel2contractTransactor: Safel2contractTransactor{contract: contract}, Safel2contractFilterer: Safel2contractFilterer{contract: contract}}, nil
}

// NewSafel2contractCaller creates a new read-only instance of Safel2contract, bound to a specific deployed contract.
func NewSafel2contractCaller(address common.Address, caller bind.ContractCaller) (*Safel2contractCaller, error) {
	contract, err := bindSafel2contract(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &Safel2contractCaller{contract: contract}, nil
}

// NewSafel2contractTransactor creates a new write-only instance of Safel2contract, bound to a specific deployed contract.
func NewSafel2contractTransactor(address common.Address, transactor bind.ContractTransactor) (*Safel2contractTransactor, error) {
	contract, err := bindSafel2contract(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &Safel2contractTransactor{contract: contract}, nil
}

// NewSafel2contractFilterer creates a new log filterer instance of Safel2contract, bound to a specific deployed contract.
func NewSafel2contractFilterer(address common.Address, filterer bind.ContractFilterer) (*Safel2contractFilterer, error) {
	contract, err := bindSafel2contract(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &Safel2contractFilterer{contract: contract}, nil
}

// bindSafel2contract binds a generic wrapper to an already deployed contract.
func bindSafel2contract(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := Safel2contractMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Safel2contract *Safel2contractRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Safel2contract.Contract.Safel2contractCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Safel2contract *Safel2contractRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Safel2contract.Contract.Safel2contractTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Safel2contract *Safel2contractRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Safel2contract.Contract.Safel2contractTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Safel2contract *Safel2contractCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Safel2contract.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Safel2contract *Safel2contractTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Safel2contract.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Safel2contract *Safel2contractTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Safel2contract.Contract.contract.Transact(opts, method, params...)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(string)
func (_Safel2contract *Safel2contractCaller) VERSION(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Safel2contract.contract.Call(opts, &out, "VERSION")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(string)
func (_Safel2contract *Safel2contractSession) VERSION() (string, error) {
	return _Safel2contract.Contract.VERSION(&_Safel2contract.CallOpts)
}

// VERSION is a free data retrieval call binding the contract method 0xffa1ad74.
//
// Solidity: function VERSION() view returns(string)
func (_Safel2contract *Safel2contractCallerSession) VERSION() (string, error) {
	return _Safel2contract.Contract.VERSION(&_Safel2contract.CallOpts)
}

// ApprovedHashes is a free data retrieval call binding the contract method 0x7d832974.
//
// Solidity: function approvedHashes(address , bytes32 ) view returns(uint256)
func (_Safel2contract *Safel2contractCaller) ApprovedHashes(opts *bind.CallOpts, arg0 common.Address, arg1 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Safel2contract.contract.Call(opts, &out, "approvedHashes", arg0, arg1)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// ApprovedHashes is a free data retrieval call binding the contract method 0x7d832974.
//
// Solidity: function approvedHashes(address , bytes32 ) view returns(uint256)
func (_Safel2contract *Safel2contractSession) ApprovedHashes(arg0 common.Address, arg1 [32]byte) (*big.Int, error) {
	return _Safel2contract.Contract.ApprovedHashes(&_Safel2contract.CallOpts, arg0, arg1)
}

// ApprovedHashes is a free data retrieval call binding the contract method 0x7d832974.
//
// Solidity: function approvedHashes(address , bytes32 ) view returns(uint256)
func (_Safel2contract *Safel2contractCallerSession) ApprovedHashes(arg0 common.Address, arg1 [32]byte) (*big.Int, error) {
	return _Safel2contract.Contract.ApprovedHashes(&_Safel2contract.CallOpts, arg0, arg1)
}

// CheckNSignatures is a free data retrieval call binding the contract method 0x12fb68e0.
//
// Solidity: function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view returns()
func (_Safel2contract *Safel2contractCaller) CheckNSignatures(opts *bind.CallOpts, dataHash [32]byte, data []byte, signatures []byte, requiredSignatures *big.Int) error {
	var out []interface{}
	err := _Safel2contract.contract.Call(opts, &out, "checkNSignatures", dataHash, data, signatures, requiredSignatures)

	if err != nil {
		return err
	}

	return err

}

// CheckNSignatures is a free data retrieval call binding the contract method 0x12fb68e0.
//
// Solidity: function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view returns()
func (_Safel2contract *Safel2contractSession) CheckNSignatures(dataHash [32]byte, data []byte, signatures []byte, requiredSignatures *big.Int) error {
	return _Safel2contract.Contract.CheckNSignatures(&_Safel2contract.CallOpts, dataHash, data, signatures, requiredSignatures)
}

// CheckNSignatures is a free data retrieval call binding the contract method 0x12fb68e0.
//
// Solidity: function checkNSignatures(bytes32 dataHash, bytes data, bytes signatures, uint256 requiredSignatures) view returns()
func (_Safel2contract *Safel2contractCallerSession) CheckNSignatures(dataHash [32]byte, data []byte, signatures []byte, requiredSignatures *big.Int) error {
	return _Safel2contract.Contract.CheckNSignatures(&_Safel2contract.CallOpts, dataHash, data, signatures, requiredSignatures)
}

// CheckSignatures is a free data retrieval call binding the contract method 0x934f3a11.
//
// Solidity: function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view returns()
func (_Safel2contract *Safel2contractCaller) CheckSignatures(opts *bind.CallOpts, dataHash [32]byte, data []byte, signatures []byte) error {
	var out []interface{}
	err := _Safel2contract.contract.Call(opts, &out, "checkSignatures", dataHash, data, signatures)

	if err != nil {
		return err
	}

	return err

}

// CheckSignatures is a free data retrieval call binding the contract method 0x934f3a11.
//
// Solidity: function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view returns()
func (_Safel2contract *Safel2contractSession) CheckSignatures(dataHash [32]byte, data []byte, signatures []byte) error {
	return _Safel2contract.Contract.CheckSignatures(&_Safel2contract.CallOpts, dataHash, data, signatures)
}

// CheckSignatures is a free data retrieval call binding the contract method 0x934f3a11.
//
// Solidity: function checkSignatures(bytes32 dataHash, bytes data, bytes signatures) view returns()
func (_Safel2contract *Safel2contractCallerSession) CheckSignatures(dataHash [32]byte, data []byte, signatures []byte) error {
	return _Safel2contract.Contract.CheckSignatures(&_Safel2contract.CallOpts, dataHash, data, signatures)
}

// DomainSeparator is a free data retrieval call binding the contract method 0xf698da25.
//
// Solidity: function domainSeparator() view returns(bytes32)
func (_Safel2contract *Safel2contractCaller) DomainSeparator(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _Safel2contract.contract.Call(opts, &out, "domainSeparator")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DomainSeparator is a free data retrieval call binding the contract method 0xf698da25.
//
// Solidity: function domainSeparator() view returns(bytes32)
func (_Safel2contract *Safel2contractSession) DomainSeparator() ([32]byte, error) {
	return _Safel2contract.Contract.DomainSeparator(&_Safel2contract.CallOpts)
}

// DomainSeparator is a free data retrieval call binding the contract method 0xf698da25.
//
// Solidity: function domainSeparator() view returns(bytes32)
func (_Safel2contract *Safel2contractCallerSession) DomainSeparator() ([32]byte, error) {
	return _Safel2contract.Contract.DomainSeparator(&_Safel2contract.CallOpts)
}

// EncodeTransactionData is a free data retrieval call binding the contract method 0xe86637db.
//
// Solidity: function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns(bytes)
func (_Safel2contract *Safel2contractCaller) EncodeTransactionData(opts *bind.CallOpts, to common.Address, value *big.Int, data []byte, operation uint8, safeTxGas *big.Int, baseGas *big.Int, gasPrice *big.Int, gasToken common.Address, refundReceiver common.Address, _nonce *big.Int) ([]byte, error) {
	var out []interface{}
	err := _Safel2contract.contract.Call(opts, &out, "encodeTransactionData", to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// EncodeTransactionData is a free data retrieval call binding the contract method 0xe86637db.
//
// Solidity: function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns(bytes)
func (_Safel2contract *Safel2contractSession) EncodeTransactionData(to common.Address, value *big.Int, data []byte, operation uint8, safeTxGas *big.Int, baseGas *big.Int, gasPrice *big.Int, gasToken common.Address, refundReceiver common.Address, _nonce *big.Int) ([]byte, error) {
	return _Safel2contract.Contract.EncodeTransactionData(&_Safel2contract.CallOpts, to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce)
}

// EncodeTransactionData is a free data retrieval call binding the contract method 0xe86637db.
//
// Solidity: function encodeTransactionData(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns(bytes)
func (_Safel2contract *Safel2contractCallerSession) EncodeTransactionData(to common.Address, value *big.Int, data []byte, operation uint8, safeTxGas *big.Int, baseGas *big.Int, gasPrice *big.Int, gasToken common.Address, refundReceiver common.Address, _nonce *big.Int) ([]byte, error) {
	return _Safel2contract.Contract.EncodeTransactionData(&_Safel2contract.CallOpts, to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256)
func (_Safel2contract *Safel2contractCaller) GetChainId(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Safel2contract.contract.Call(opts, &out, "getChainId")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256)
func (_Safel2contract *Safel2contractSession) GetChainId() (*big.Int, error) {
	return _Safel2contract.Contract.GetChainId(&_Safel2contract.CallOpts)
}

// GetChainId is a free data retrieval call binding the contract method 0x3408e470.
//
// Solidity: function getChainId() view returns(uint256)
func (_Safel2contract *Safel2contractCallerSession) GetChainId() (*big.Int, error) {
	return _Safel2contract.Contract.GetChainId(&_Safel2contract.CallOpts)
}

// GetModulesPaginated is a free data retrieval call binding the contract method 0xcc2f8452.
//
// Solidity: function getModulesPaginated(address start, uint256 pageSize) view returns(address[] array, address next)
func (_Safel2contract *Safel2contractCaller) GetModulesPaginated(opts *bind.CallOpts, start common.Address, pageSize *big.Int) (struct {
	Array []common.Address
	Next  common.Address
}, error) {
	var out []interface{}
	err := _Safel2contract.contract.Call(opts, &out, "getModulesPaginated", start, pageSize)

	outstruct := new(struct {
		Array []common.Address
		Next  common.Address
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Array = *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)
	outstruct.Next = *abi.ConvertType(out[1], new(common.Address)).(*common.Address)

	return *outstruct, err

}

// GetModulesPaginated is a free data retrieval call binding the contract method 0xcc2f8452.
//
// Solidity: function getModulesPaginated(address start, uint256 pageSize) view returns(address[] array, address next)
func (_Safel2contract *Safel2contractSession) GetModulesPaginated(start common.Address, pageSize *big.Int) (struct {
	Array []common.Address
	Next  common.Address
}, error) {
	return _Safel2contract.Contract.GetModulesPaginated(&_Safel2contract.CallOpts, start, pageSize)
}

// GetModulesPaginated is a free data retrieval call binding the contract method 0xcc2f8452.
//
// Solidity: function getModulesPaginated(address start, uint256 pageSize) view returns(address[] array, address next)
func (_Safel2contract *Safel2contractCallerSession) GetModulesPaginated(start common.Address, pageSize *big.Int) (struct {
	Array []common.Address
	Next  common.Address
}, error) {
	return _Safel2contract.Contract.GetModulesPaginated(&_Safel2contract.CallOpts, start, pageSize)
}

// GetOwners is a free data retrieval call binding the contract method 0xa0e67e2b.
//
// Solidity: function getOwners() view returns(address[])
func (_Safel2contract *Safel2contractCaller) GetOwners(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Safel2contract.contract.Call(opts, &out, "getOwners")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetOwners is a free data retrieval call binding the contract method 0xa0e67e2b.
//
// Solidity: function getOwners() view returns(address[])
func (_Safel2contract *Safel2contractSession) GetOwners() ([]common.Address, error) {
	return _Safel2contract.Contract.GetOwners(&_Safel2contract.CallOpts)
}

// GetOwners is a free data retrieval call binding the contract method 0xa0e67e2b.
//
// Solidity: function getOwners() view returns(address[])
func (_Safel2contract *Safel2contractCallerSession) GetOwners() ([]common.Address, error) {
	return _Safel2contract.Contract.GetOwners(&_Safel2contract.CallOpts)
}

// GetStorageAt is a free data retrieval call binding the contract method 0x5624b25b.
//
// Solidity: function getStorageAt(uint256 offset, uint256 length) view returns(bytes)
func (_Safel2contract *Safel2contractCaller) GetStorageAt(opts *bind.CallOpts, offset *big.Int, length *big.Int) ([]byte, error) {
	var out []interface{}
	err := _Safel2contract.contract.Call(opts, &out, "getStorageAt", offset, length)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// GetStorageAt is a free data retrieval call binding the contract method 0x5624b25b.
//
// Solidity: function getStorageAt(uint256 offset, uint256 length) view returns(bytes)
func (_Safel2contract *Safel2contractSession) GetStorageAt(offset *big.Int, length *big.Int) ([]byte, error) {
	return _Safel2contract.Contract.GetStorageAt(&_Safel2contract.CallOpts, offset, length)
}

// GetStorageAt is a free data retrieval call binding the contract method 0x5624b25b.
//
// Solidity: function getStorageAt(uint256 offset, uint256 length) view returns(bytes)
func (_Safel2contract *Safel2contractCallerSession) GetStorageAt(offset *big.Int, length *big.Int) ([]byte, error) {
	return _Safel2contract.Contract.GetStorageAt(&_Safel2contract.CallOpts, offset, length)
}

// GetThreshold is a free data retrieval call binding the contract method 0xe75235b8.
//
// Solidity: function getThreshold() view returns(uint256)
func (_Safel2contract *Safel2contractCaller) GetThreshold(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Safel2contract.contract.Call(opts, &out, "getThreshold")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetThreshold is a free data retrieval call binding the contract method 0xe75235b8.
//
// Solidity: function getThreshold() view returns(uint256)
func (_Safel2contract *Safel2contractSession) GetThreshold() (*big.Int, error) {
	return _Safel2contract.Contract.GetThreshold(&_Safel2contract.CallOpts)
}

// GetThreshold is a free data retrieval call binding the contract method 0xe75235b8.
//
// Solidity: function getThreshold() view returns(uint256)
func (_Safel2contract *Safel2contractCallerSession) GetThreshold() (*big.Int, error) {
	return _Safel2contract.Contract.GetThreshold(&_Safel2contract.CallOpts)
}

// GetTransactionHash is a free data retrieval call binding the contract method 0xd8d11f78.
//
// Solidity: function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns(bytes32)
func (_Safel2contract *Safel2contractCaller) GetTransactionHash(opts *bind.CallOpts, to common.Address, value *big.Int, data []byte, operation uint8, safeTxGas *big.Int, baseGas *big.Int, gasPrice *big.Int, gasToken common.Address, refundReceiver common.Address, _nonce *big.Int) ([32]byte, error) {
	var out []interface{}
	err := _Safel2contract.contract.Call(opts, &out, "getTransactionHash", to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetTransactionHash is a free data retrieval call binding the contract method 0xd8d11f78.
//
// Solidity: function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns(bytes32)
func (_Safel2contract *Safel2contractSession) GetTransactionHash(to common.Address, value *big.Int, data []byte, operation uint8, safeTxGas *big.Int, baseGas *big.Int, gasPrice *big.Int, gasToken common.Address, refundReceiver common.Address, _nonce *big.Int) ([32]byte, error) {
	return _Safel2contract.Contract.GetTransactionHash(&_Safel2contract.CallOpts, to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce)
}

// GetTransactionHash is a free data retrieval call binding the contract method 0xd8d11f78.
//
// Solidity: function getTransactionHash(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, uint256 _nonce) view returns(bytes32)
func (_Safel2contract *Safel2contractCallerSession) GetTransactionHash(to common.Address, value *big.Int, data []byte, operation uint8, safeTxGas *big.Int, baseGas *big.Int, gasPrice *big.Int, gasToken common.Address, refundReceiver common.Address, _nonce *big.Int) ([32]byte, error) {
	return _Safel2contract.Contract.GetTransactionHash(&_Safel2contract.CallOpts, to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, _nonce)
}

// IsModuleEnabled is a free data retrieval call binding the contract method 0x2d9ad53d.
//
// Solidity: function isModuleEnabled(address module) view returns(bool)
func (_Safel2contract *Safel2contractCaller) IsModuleEnabled(opts *bind.CallOpts, module common.Address) (bool, error) {
	var out []interface{}
	err := _Safel2contract.contract.Call(opts, &out, "isModuleEnabled", module)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsModuleEnabled is a free data retrieval call binding the contract method 0x2d9ad53d.
//
// Solidity: function isModuleEnabled(address module) view returns(bool)
func (_Safel2contract *Safel2contractSession) IsModuleEnabled(module common.Address) (bool, error) {
	return _Safel2contract.Contract.IsModuleEnabled(&_Safel2contract.CallOpts, module)
}

// IsModuleEnabled is a free data retrieval call binding the contract method 0x2d9ad53d.
//
// Solidity: function isModuleEnabled(address module) view returns(bool)
func (_Safel2contract *Safel2contractCallerSession) IsModuleEnabled(module common.Address) (bool, error) {
	return _Safel2contract.Contract.IsModuleEnabled(&_Safel2contract.CallOpts, module)
}

// IsOwner is a free data retrieval call binding the contract method 0x2f54bf6e.
//
// Solidity: function isOwner(address owner) view returns(bool)
func (_Safel2contract *Safel2contractCaller) IsOwner(opts *bind.CallOpts, owner common.Address) (bool, error) {
	var out []interface{}
	err := _Safel2contract.contract.Call(opts, &out, "isOwner", owner)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsOwner is a free data retrieval call binding the contract method 0x2f54bf6e.
//
// Solidity: function isOwner(address owner) view returns(bool)
func (_Safel2contract *Safel2contractSession) IsOwner(owner common.Address) (bool, error) {
	return _Safel2contract.Contract.IsOwner(&_Safel2contract.CallOpts, owner)
}

// IsOwner is a free data retrieval call binding the contract method 0x2f54bf6e.
//
// Solidity: function isOwner(address owner) view returns(bool)
func (_Safel2contract *Safel2contractCallerSession) IsOwner(owner common.Address) (bool, error) {
	return _Safel2contract.Contract.IsOwner(&_Safel2contract.CallOpts, owner)
}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint256)
func (_Safel2contract *Safel2contractCaller) Nonce(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Safel2contract.contract.Call(opts, &out, "nonce")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint256)
func (_Safel2contract *Safel2contractSession) Nonce() (*big.Int, error) {
	return _Safel2contract.Contract.Nonce(&_Safel2contract.CallOpts)
}

// Nonce is a free data retrieval call binding the contract method 0xaffed0e0.
//
// Solidity: function nonce() view returns(uint256)
func (_Safel2contract *Safel2contractCallerSession) Nonce() (*big.Int, error) {
	return _Safel2contract.Contract.Nonce(&_Safel2contract.CallOpts)
}

// SignedMessages is a free data retrieval call binding the contract method 0x5ae6bd37.
//
// Solidity: function signedMessages(bytes32 ) view returns(uint256)
func (_Safel2contract *Safel2contractCaller) SignedMessages(opts *bind.CallOpts, arg0 [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _Safel2contract.contract.Call(opts, &out, "signedMessages", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SignedMessages is a free data retrieval call binding the contract method 0x5ae6bd37.
//
// Solidity: function signedMessages(bytes32 ) view returns(uint256)
func (_Safel2contract *Safel2contractSession) SignedMessages(arg0 [32]byte) (*big.Int, error) {
	return _Safel2contract.Contract.SignedMessages(&_Safel2contract.CallOpts, arg0)
}

// SignedMessages is a free data retrieval call binding the contract method 0x5ae6bd37.
//
// Solidity: function signedMessages(bytes32 ) view returns(uint256)
func (_Safel2contract *Safel2contractCallerSession) SignedMessages(arg0 [32]byte) (*big.Int, error) {
	return _Safel2contract.Contract.SignedMessages(&_Safel2contract.CallOpts, arg0)
}

// AddOwnerWithThreshold is a paid mutator transaction binding the contract method 0x0d582f13.
//
// Solidity: function addOwnerWithThreshold(address owner, uint256 _threshold) returns()
func (_Safel2contract *Safel2contractTransactor) AddOwnerWithThreshold(opts *bind.TransactOpts, owner common.Address, _threshold *big.Int) (*types.Transaction, error) {
	return _Safel2contract.contract.Transact(opts, "addOwnerWithThreshold", owner, _threshold)
}

// AddOwnerWithThreshold is a paid mutator transaction binding the contract method 0x0d582f13.
//
// Solidity: function addOwnerWithThreshold(address owner, uint256 _threshold) returns()
func (_Safel2contract *Safel2contractSession) AddOwnerWithThreshold(owner common.Address, _threshold *big.Int) (*types.Transaction, error) {
	return _Safel2contract.Contract.AddOwnerWithThreshold(&_Safel2contract.TransactOpts, owner, _threshold)
}

// AddOwnerWithThreshold is a paid mutator transaction binding the contract method 0x0d582f13.
//
// Solidity: function addOwnerWithThreshold(address owner, uint256 _threshold) returns()
func (_Safel2contract *Safel2contractTransactorSession) AddOwnerWithThreshold(owner common.Address, _threshold *big.Int) (*types.Transaction, error) {
	return _Safel2contract.Contract.AddOwnerWithThreshold(&_Safel2contract.TransactOpts, owner, _threshold)
}

// ApproveHash is a paid mutator transaction binding the contract method 0xd4d9bdcd.
//
// Solidity: function approveHash(bytes32 hashToApprove) returns()
func (_Safel2contract *Safel2contractTransactor) ApproveHash(opts *bind.TransactOpts, hashToApprove [32]byte) (*types.Transaction, error) {
	return _Safel2contract.contract.Transact(opts, "approveHash", hashToApprove)
}

// ApproveHash is a paid mutator transaction binding the contract method 0xd4d9bdcd.
//
// Solidity: function approveHash(bytes32 hashToApprove) returns()
func (_Safel2contract *Safel2contractSession) ApproveHash(hashToApprove [32]byte) (*types.Transaction, error) {
	return _Safel2contract.Contract.ApproveHash(&_Safel2contract.TransactOpts, hashToApprove)
}

// ApproveHash is a paid mutator transaction binding the contract method 0xd4d9bdcd.
//
// Solidity: function approveHash(bytes32 hashToApprove) returns()
func (_Safel2contract *Safel2contractTransactorSession) ApproveHash(hashToApprove [32]byte) (*types.Transaction, error) {
	return _Safel2contract.Contract.ApproveHash(&_Safel2contract.TransactOpts, hashToApprove)
}

// ChangeThreshold is a paid mutator transaction binding the contract method 0x694e80c3.
//
// Solidity: function changeThreshold(uint256 _threshold) returns()
func (_Safel2contract *Safel2contractTransactor) ChangeThreshold(opts *bind.TransactOpts, _threshold *big.Int) (*types.Transaction, error) {
	return _Safel2contract.contract.Transact(opts, "changeThreshold", _threshold)
}

// ChangeThreshold is a paid mutator transaction binding the contract method 0x694e80c3.
//
// Solidity: function changeThreshold(uint256 _threshold) returns()
func (_Safel2contract *Safel2contractSession) ChangeThreshold(_threshold *big.Int) (*types.Transaction, error) {
	return _Safel2contract.Contract.ChangeThreshold(&_Safel2contract.TransactOpts, _threshold)
}

// ChangeThreshold is a paid mutator transaction binding the contract method 0x694e80c3.
//
// Solidity: function changeThreshold(uint256 _threshold) returns()
func (_Safel2contract *Safel2contractTransactorSession) ChangeThreshold(_threshold *big.Int) (*types.Transaction, error) {
	return _Safel2contract.Contract.ChangeThreshold(&_Safel2contract.TransactOpts, _threshold)
}

// DisableModule is a paid mutator transaction binding the contract method 0xe009cfde.
//
// Solidity: function disableModule(address prevModule, address module) returns()
func (_Safel2contract *Safel2contractTransactor) DisableModule(opts *bind.TransactOpts, prevModule common.Address, module common.Address) (*types.Transaction, error) {
	return _Safel2contract.contract.Transact(opts, "disableModule", prevModule, module)
}

// DisableModule is a paid mutator transaction binding the contract method 0xe009cfde.
//
// Solidity: function disableModule(address prevModule, address module) returns()
func (_Safel2contract *Safel2contractSession) DisableModule(prevModule common.Address, module common.Address) (*types.Transaction, error) {
	return _Safel2contract.Contract.DisableModule(&_Safel2contract.TransactOpts, prevModule, module)
}

// DisableModule is a paid mutator transaction binding the contract method 0xe009cfde.
//
// Solidity: function disableModule(address prevModule, address module) returns()
func (_Safel2contract *Safel2contractTransactorSession) DisableModule(prevModule common.Address, module common.Address) (*types.Transaction, error) {
	return _Safel2contract.Contract.DisableModule(&_Safel2contract.TransactOpts, prevModule, module)
}

// EnableModule is a paid mutator transaction binding the contract method 0x610b5925.
//
// Solidity: function enableModule(address module) returns()
func (_Safel2contract *Safel2contractTransactor) EnableModule(opts *bind.TransactOpts, module common.Address) (*types.Transaction, error) {
	return _Safel2contract.contract.Transact(opts, "enableModule", module)
}

// EnableModule is a paid mutator transaction binding the contract method 0x610b5925.
//
// Solidity: function enableModule(address module) returns()
func (_Safel2contract *Safel2contractSession) EnableModule(module common.Address) (*types.Transaction, error) {
	return _Safel2contract.Contract.EnableModule(&_Safel2contract.TransactOpts, module)
}

// EnableModule is a paid mutator transaction binding the contract method 0x610b5925.
//
// Solidity: function enableModule(address module) returns()
func (_Safel2contract *Safel2contractTransactorSession) EnableModule(module common.Address) (*types.Transaction, error) {
	return _Safel2contract.Contract.EnableModule(&_Safel2contract.TransactOpts, module)
}

// ExecTransaction is a paid mutator transaction binding the contract method 0x6a761202.
//
// Solidity: function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns(bool)
func (_Safel2contract *Safel2contractTransactor) ExecTransaction(opts *bind.TransactOpts, to common.Address, value *big.Int, data []byte, operation uint8, safeTxGas *big.Int, baseGas *big.Int, gasPrice *big.Int, gasToken common.Address, refundReceiver common.Address, signatures []byte) (*types.Transaction, error) {
	return _Safel2contract.contract.Transact(opts, "execTransaction", to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, signatures)
}

// ExecTransaction is a paid mutator transaction binding the contract method 0x6a761202.
//
// Solidity: function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns(bool)
func (_Safel2contract *Safel2contractSession) ExecTransaction(to common.Address, value *big.Int, data []byte, operation uint8, safeTxGas *big.Int, baseGas *big.Int, gasPrice *big.Int, gasToken common.Address, refundReceiver common.Address, signatures []byte) (*types.Transaction, error) {
	return _Safel2contract.Contract.ExecTransaction(&_Safel2contract.TransactOpts, to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, signatures)
}

// ExecTransaction is a paid mutator transaction binding the contract method 0x6a761202.
//
// Solidity: function execTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures) payable returns(bool)
func (_Safel2contract *Safel2contractTransactorSession) ExecTransaction(to common.Address, value *big.Int, data []byte, operation uint8, safeTxGas *big.Int, baseGas *big.Int, gasPrice *big.Int, gasToken common.Address, refundReceiver common.Address, signatures []byte) (*types.Transaction, error) {
	return _Safel2contract.Contract.ExecTransaction(&_Safel2contract.TransactOpts, to, value, data, operation, safeTxGas, baseGas, gasPrice, gasToken, refundReceiver, signatures)
}

// ExecTransactionFromModule is a paid mutator transaction binding the contract method 0x468721a7.
//
// Solidity: function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns(bool success)
func (_Safel2contract *Safel2contractTransactor) ExecTransactionFromModule(opts *bind.TransactOpts, to common.Address, value *big.Int, data []byte, operation uint8) (*types.Transaction, error) {
	return _Safel2contract.contract.Transact(opts, "execTransactionFromModule", to, value, data, operation)
}

// ExecTransactionFromModule is a paid mutator transaction binding the contract method 0x468721a7.
//
// Solidity: function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns(bool success)
func (_Safel2contract *Safel2contractSession) ExecTransactionFromModule(to common.Address, value *big.Int, data []byte, operation uint8) (*types.Transaction, error) {
	return _Safel2contract.Contract.ExecTransactionFromModule(&_Safel2contract.TransactOpts, to, value, data, operation)
}

// ExecTransactionFromModule is a paid mutator transaction binding the contract method 0x468721a7.
//
// Solidity: function execTransactionFromModule(address to, uint256 value, bytes data, uint8 operation) returns(bool success)
func (_Safel2contract *Safel2contractTransactorSession) ExecTransactionFromModule(to common.Address, value *big.Int, data []byte, operation uint8) (*types.Transaction, error) {
	return _Safel2contract.Contract.ExecTransactionFromModule(&_Safel2contract.TransactOpts, to, value, data, operation)
}

// ExecTransactionFromModuleReturnData is a paid mutator transaction binding the contract method 0x5229073f.
//
// Solidity: function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns(bool success, bytes returnData)
func (_Safel2contract *Safel2contractTransactor) ExecTransactionFromModuleReturnData(opts *bind.TransactOpts, to common.Address, value *big.Int, data []byte, operation uint8) (*types.Transaction, error) {
	return _Safel2contract.contract.Transact(opts, "execTransactionFromModuleReturnData", to, value, data, operation)
}

// ExecTransactionFromModuleReturnData is a paid mutator transaction binding the contract method 0x5229073f.
//
// Solidity: function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns(bool success, bytes returnData)
func (_Safel2contract *Safel2contractSession) ExecTransactionFromModuleReturnData(to common.Address, value *big.Int, data []byte, operation uint8) (*types.Transaction, error) {
	return _Safel2contract.Contract.ExecTransactionFromModuleReturnData(&_Safel2contract.TransactOpts, to, value, data, operation)
}

// ExecTransactionFromModuleReturnData is a paid mutator transaction binding the contract method 0x5229073f.
//
// Solidity: function execTransactionFromModuleReturnData(address to, uint256 value, bytes data, uint8 operation) returns(bool success, bytes returnData)
func (_Safel2contract *Safel2contractTransactorSession) ExecTransactionFromModuleReturnData(to common.Address, value *big.Int, data []byte, operation uint8) (*types.Transaction, error) {
	return _Safel2contract.Contract.ExecTransactionFromModuleReturnData(&_Safel2contract.TransactOpts, to, value, data, operation)
}

// RemoveOwner is a paid mutator transaction binding the contract method 0xf8dc5dd9.
//
// Solidity: function removeOwner(address prevOwner, address owner, uint256 _threshold) returns()
func (_Safel2contract *Safel2contractTransactor) RemoveOwner(opts *bind.TransactOpts, prevOwner common.Address, owner common.Address, _threshold *big.Int) (*types.Transaction, error) {
	return _Safel2contract.contract.Transact(opts, "removeOwner", prevOwner, owner, _threshold)
}

// RemoveOwner is a paid mutator transaction binding the contract method 0xf8dc5dd9.
//
// Solidity: function removeOwner(address prevOwner, address owner, uint256 _threshold) returns()
func (_Safel2contract *Safel2contractSession) RemoveOwner(prevOwner common.Address, owner common.Address, _threshold *big.Int) (*types.Transaction, error) {
	return _Safel2contract.Contract.RemoveOwner(&_Safel2contract.TransactOpts, prevOwner, owner, _threshold)
}

// RemoveOwner is a paid mutator transaction binding the contract method 0xf8dc5dd9.
//
// Solidity: function removeOwner(address prevOwner, address owner, uint256 _threshold) returns()
func (_Safel2contract *Safel2contractTransactorSession) RemoveOwner(prevOwner common.Address, owner common.Address, _threshold *big.Int) (*types.Transaction, error) {
	return _Safel2contract.Contract.RemoveOwner(&_Safel2contract.TransactOpts, prevOwner, owner, _threshold)
}

// RequiredTxGas is a paid mutator transaction binding the contract method 0xc4ca3a9c.
//
// Solidity: function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns(uint256)
func (_Safel2contract *Safel2contractTransactor) RequiredTxGas(opts *bind.TransactOpts, to common.Address, value *big.Int, data []byte, operation uint8) (*types.Transaction, error) {
	return _Safel2contract.contract.Transact(opts, "requiredTxGas", to, value, data, operation)
}

// RequiredTxGas is a paid mutator transaction binding the contract method 0xc4ca3a9c.
//
// Solidity: function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns(uint256)
func (_Safel2contract *Safel2contractSession) RequiredTxGas(to common.Address, value *big.Int, data []byte, operation uint8) (*types.Transaction, error) {
	return _Safel2contract.Contract.RequiredTxGas(&_Safel2contract.TransactOpts, to, value, data, operation)
}

// RequiredTxGas is a paid mutator transaction binding the contract method 0xc4ca3a9c.
//
// Solidity: function requiredTxGas(address to, uint256 value, bytes data, uint8 operation) returns(uint256)
func (_Safel2contract *Safel2contractTransactorSession) RequiredTxGas(to common.Address, value *big.Int, data []byte, operation uint8) (*types.Transaction, error) {
	return _Safel2contract.Contract.RequiredTxGas(&_Safel2contract.TransactOpts, to, value, data, operation)
}

// SetFallbackHandler is a paid mutator transaction binding the contract method 0xf08a0323.
//
// Solidity: function setFallbackHandler(address handler) returns()
func (_Safel2contract *Safel2contractTransactor) SetFallbackHandler(opts *bind.TransactOpts, handler common.Address) (*types.Transaction, error) {
	return _Safel2contract.contract.Transact(opts, "setFallbackHandler", handler)
}

// SetFallbackHandler is a paid mutator transaction binding the contract method 0xf08a0323.
//
// Solidity: function setFallbackHandler(address handler) returns()
func (_Safel2contract *Safel2contractSession) SetFallbackHandler(handler common.Address) (*types.Transaction, error) {
	return _Safel2contract.Contract.SetFallbackHandler(&_Safel2contract.TransactOpts, handler)
}

// SetFallbackHandler is a paid mutator transaction binding the contract method 0xf08a0323.
//
// Solidity: function setFallbackHandler(address handler) returns()
func (_Safel2contract *Safel2contractTransactorSession) SetFallbackHandler(handler common.Address) (*types.Transaction, error) {
	return _Safel2contract.Contract.SetFallbackHandler(&_Safel2contract.TransactOpts, handler)
}

// SetGuard is a paid mutator transaction binding the contract method 0xe19a9dd9.
//
// Solidity: function setGuard(address guard) returns()
func (_Safel2contract *Safel2contractTransactor) SetGuard(opts *bind.TransactOpts, guard common.Address) (*types.Transaction, error) {
	return _Safel2contract.contract.Transact(opts, "setGuard", guard)
}

// SetGuard is a paid mutator transaction binding the contract method 0xe19a9dd9.
//
// Solidity: function setGuard(address guard) returns()
func (_Safel2contract *Safel2contractSession) SetGuard(guard common.Address) (*types.Transaction, error) {
	return _Safel2contract.Contract.SetGuard(&_Safel2contract.TransactOpts, guard)
}

// SetGuard is a paid mutator transaction binding the contract method 0xe19a9dd9.
//
// Solidity: function setGuard(address guard) returns()
func (_Safel2contract *Safel2contractTransactorSession) SetGuard(guard common.Address) (*types.Transaction, error) {
	return _Safel2contract.Contract.SetGuard(&_Safel2contract.TransactOpts, guard)
}

// Setup is a paid mutator transaction binding the contract method 0xb63e800d.
//
// Solidity: function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver) returns()
func (_Safel2contract *Safel2contractTransactor) Setup(opts *bind.TransactOpts, _owners []common.Address, _threshold *big.Int, to common.Address, data []byte, fallbackHandler common.Address, paymentToken common.Address, payment *big.Int, paymentReceiver common.Address) (*types.Transaction, error) {
	return _Safel2contract.contract.Transact(opts, "setup", _owners, _threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver)
}

// Setup is a paid mutator transaction binding the contract method 0xb63e800d.
//
// Solidity: function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver) returns()
func (_Safel2contract *Safel2contractSession) Setup(_owners []common.Address, _threshold *big.Int, to common.Address, data []byte, fallbackHandler common.Address, paymentToken common.Address, payment *big.Int, paymentReceiver common.Address) (*types.Transaction, error) {
	return _Safel2contract.Contract.Setup(&_Safel2contract.TransactOpts, _owners, _threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver)
}

// Setup is a paid mutator transaction binding the contract method 0xb63e800d.
//
// Solidity: function setup(address[] _owners, uint256 _threshold, address to, bytes data, address fallbackHandler, address paymentToken, uint256 payment, address paymentReceiver) returns()
func (_Safel2contract *Safel2contractTransactorSession) Setup(_owners []common.Address, _threshold *big.Int, to common.Address, data []byte, fallbackHandler common.Address, paymentToken common.Address, payment *big.Int, paymentReceiver common.Address) (*types.Transaction, error) {
	return _Safel2contract.Contract.Setup(&_Safel2contract.TransactOpts, _owners, _threshold, to, data, fallbackHandler, paymentToken, payment, paymentReceiver)
}

// SimulateAndRevert is a paid mutator transaction binding the contract method 0xb4faba09.
//
// Solidity: function simulateAndRevert(address targetContract, bytes calldataPayload) returns()
func (_Safel2contract *Safel2contractTransactor) SimulateAndRevert(opts *bind.TransactOpts, targetContract common.Address, calldataPayload []byte) (*types.Transaction, error) {
	return _Safel2contract.contract.Transact(opts, "simulateAndRevert", targetContract, calldataPayload)
}

// SimulateAndRevert is a paid mutator transaction binding the contract method 0xb4faba09.
//
// Solidity: function simulateAndRevert(address targetContract, bytes calldataPayload) returns()
func (_Safel2contract *Safel2contractSession) SimulateAndRevert(targetContract common.Address, calldataPayload []byte) (*types.Transaction, error) {
	return _Safel2contract.Contract.SimulateAndRevert(&_Safel2contract.TransactOpts, targetContract, calldataPayload)
}

// SimulateAndRevert is a paid mutator transaction binding the contract method 0xb4faba09.
//
// Solidity: function simulateAndRevert(address targetContract, bytes calldataPayload) returns()
func (_Safel2contract *Safel2contractTransactorSession) SimulateAndRevert(targetContract common.Address, calldataPayload []byte) (*types.Transaction, error) {
	return _Safel2contract.Contract.SimulateAndRevert(&_Safel2contract.TransactOpts, targetContract, calldataPayload)
}

// SwapOwner is a paid mutator transaction binding the contract method 0xe318b52b.
//
// Solidity: function swapOwner(address prevOwner, address oldOwner, address newOwner) returns()
func (_Safel2contract *Safel2contractTransactor) SwapOwner(opts *bind.TransactOpts, prevOwner common.Address, oldOwner common.Address, newOwner common.Address) (*types.Transaction, error) {
	return _Safel2contract.contract.Transact(opts, "swapOwner", prevOwner, oldOwner, newOwner)
}

// SwapOwner is a paid mutator transaction binding the contract method 0xe318b52b.
//
// Solidity: function swapOwner(address prevOwner, address oldOwner, address newOwner) returns()
func (_Safel2contract *Safel2contractSession) SwapOwner(prevOwner common.Address, oldOwner common.Address, newOwner common.Address) (*types.Transaction, error) {
	return _Safel2contract.Contract.SwapOwner(&_Safel2contract.TransactOpts, prevOwner, oldOwner, newOwner)
}

// SwapOwner is a paid mutator transaction binding the contract method 0xe318b52b.
//
// Solidity: function swapOwner(address prevOwner, address oldOwner, address newOwner) returns()
func (_Safel2contract *Safel2contractTransactorSession) SwapOwner(prevOwner common.Address, oldOwner common.Address, newOwner common.Address) (*types.Transaction, error) {
	return _Safel2contract.Contract.SwapOwner(&_Safel2contract.TransactOpts, prevOwner, oldOwner, newOwner)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() returns()
func (_Safel2contract *Safel2contractTransactor) Fallback(opts *bind.TransactOpts, calldata []byte) (*types.Transaction, error) {
	return _Safel2contract.contract.RawTransact(opts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() returns()
func (_Safel2contract *Safel2contractSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Safel2contract.Contract.Fallback(&_Safel2contract.TransactOpts, calldata)
}

// Fallback is a paid mutator transaction binding the contract fallback function.
//
// Solidity: fallback() returns()
func (_Safel2contract *Safel2contractTransactorSession) Fallback(calldata []byte) (*types.Transaction, error) {
	return _Safel2contract.Contract.Fallback(&_Safel2contract.TransactOpts, calldata)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Safel2contract *Safel2contractTransactor) Receive(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Safel2contract.contract.RawTransact(opts, nil) // calldata is disallowed for receive function
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Safel2contract *Safel2contractSession) Receive() (*types.Transaction, error) {
	return _Safel2contract.Contract.Receive(&_Safel2contract.TransactOpts)
}

// Receive is a paid mutator transaction binding the contract receive function.
//
// Solidity: receive() payable returns()
func (_Safel2contract *Safel2contractTransactorSession) Receive() (*types.Transaction, error) {
	return _Safel2contract.Contract.Receive(&_Safel2contract.TransactOpts)
}

// Safel2contractAddedOwnerIterator is returned from FilterAddedOwner and is used to iterate over the raw logs and unpacked data for AddedOwner events raised by the Safel2contract contract.
type Safel2contractAddedOwnerIterator struct {
	Event *Safel2contractAddedOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Safel2contractAddedOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Safel2contractAddedOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Safel2contractAddedOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Safel2contractAddedOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Safel2contractAddedOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Safel2contractAddedOwner represents a AddedOwner event raised by the Safel2contract contract.
type Safel2contractAddedOwner struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterAddedOwner is a free log retrieval operation binding the contract event 0x9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea26.
//
// Solidity: event AddedOwner(address owner)
func (_Safel2contract *Safel2contractFilterer) FilterAddedOwner(opts *bind.FilterOpts) (*Safel2contractAddedOwnerIterator, error) {

	logs, sub, err := _Safel2contract.contract.FilterLogs(opts, "AddedOwner")
	if err != nil {
		return nil, err
	}
	return &Safel2contractAddedOwnerIterator{contract: _Safel2contract.contract, event: "AddedOwner", logs: logs, sub: sub}, nil
}

// WatchAddedOwner is a free log subscription operation binding the contract event 0x9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea26.
//
// Solidity: event AddedOwner(address owner)
func (_Safel2contract *Safel2contractFilterer) WatchAddedOwner(opts *bind.WatchOpts, sink chan<- *Safel2contractAddedOwner) (event.Subscription, error) {

	logs, sub, err := _Safel2contract.contract.WatchLogs(opts, "AddedOwner")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Safel2contractAddedOwner)
				if err := _Safel2contract.contract.UnpackLog(event, "AddedOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAddedOwner is a log parse operation binding the contract event 0x9465fa0c962cc76958e6373a993326400c1c94f8be2fe3a952adfa7f60b2ea26.
//
// Solidity: event AddedOwner(address owner)
func (_Safel2contract *Safel2contractFilterer) ParseAddedOwner(log types.Log) (*Safel2contractAddedOwner, error) {
	event := new(Safel2contractAddedOwner)
	if err := _Safel2contract.contract.UnpackLog(event, "AddedOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Safel2contractApproveHashIterator is returned from FilterApproveHash and is used to iterate over the raw logs and unpacked data for ApproveHash events raised by the Safel2contract contract.
type Safel2contractApproveHashIterator struct {
	Event *Safel2contractApproveHash // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Safel2contractApproveHashIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Safel2contractApproveHash)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Safel2contractApproveHash)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Safel2contractApproveHashIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Safel2contractApproveHashIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Safel2contractApproveHash represents a ApproveHash event raised by the Safel2contract contract.
type Safel2contractApproveHash struct {
	ApprovedHash [32]byte
	Owner        common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterApproveHash is a free log retrieval operation binding the contract event 0xf2a0eb156472d1440255b0d7c1e19cc07115d1051fe605b0dce69acfec884d9c.
//
// Solidity: event ApproveHash(bytes32 indexed approvedHash, address indexed owner)
func (_Safel2contract *Safel2contractFilterer) FilterApproveHash(opts *bind.FilterOpts, approvedHash [][32]byte, owner []common.Address) (*Safel2contractApproveHashIterator, error) {

	var approvedHashRule []interface{}
	for _, approvedHashItem := range approvedHash {
		approvedHashRule = append(approvedHashRule, approvedHashItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Safel2contract.contract.FilterLogs(opts, "ApproveHash", approvedHashRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return &Safel2contractApproveHashIterator{contract: _Safel2contract.contract, event: "ApproveHash", logs: logs, sub: sub}, nil
}

// WatchApproveHash is a free log subscription operation binding the contract event 0xf2a0eb156472d1440255b0d7c1e19cc07115d1051fe605b0dce69acfec884d9c.
//
// Solidity: event ApproveHash(bytes32 indexed approvedHash, address indexed owner)
func (_Safel2contract *Safel2contractFilterer) WatchApproveHash(opts *bind.WatchOpts, sink chan<- *Safel2contractApproveHash, approvedHash [][32]byte, owner []common.Address) (event.Subscription, error) {

	var approvedHashRule []interface{}
	for _, approvedHashItem := range approvedHash {
		approvedHashRule = append(approvedHashRule, approvedHashItem)
	}
	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}

	logs, sub, err := _Safel2contract.contract.WatchLogs(opts, "ApproveHash", approvedHashRule, ownerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Safel2contractApproveHash)
				if err := _Safel2contract.contract.UnpackLog(event, "ApproveHash", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproveHash is a log parse operation binding the contract event 0xf2a0eb156472d1440255b0d7c1e19cc07115d1051fe605b0dce69acfec884d9c.
//
// Solidity: event ApproveHash(bytes32 indexed approvedHash, address indexed owner)
func (_Safel2contract *Safel2contractFilterer) ParseApproveHash(log types.Log) (*Safel2contractApproveHash, error) {
	event := new(Safel2contractApproveHash)
	if err := _Safel2contract.contract.UnpackLog(event, "ApproveHash", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Safel2contractChangedFallbackHandlerIterator is returned from FilterChangedFallbackHandler and is used to iterate over the raw logs and unpacked data for ChangedFallbackHandler events raised by the Safel2contract contract.
type Safel2contractChangedFallbackHandlerIterator struct {
	Event *Safel2contractChangedFallbackHandler // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Safel2contractChangedFallbackHandlerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Safel2contractChangedFallbackHandler)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Safel2contractChangedFallbackHandler)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Safel2contractChangedFallbackHandlerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Safel2contractChangedFallbackHandlerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Safel2contractChangedFallbackHandler represents a ChangedFallbackHandler event raised by the Safel2contract contract.
type Safel2contractChangedFallbackHandler struct {
	Handler common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterChangedFallbackHandler is a free log retrieval operation binding the contract event 0x5ac6c46c93c8d0e53714ba3b53db3e7c046da994313d7ed0d192028bc7c228b0.
//
// Solidity: event ChangedFallbackHandler(address handler)
func (_Safel2contract *Safel2contractFilterer) FilterChangedFallbackHandler(opts *bind.FilterOpts) (*Safel2contractChangedFallbackHandlerIterator, error) {

	logs, sub, err := _Safel2contract.contract.FilterLogs(opts, "ChangedFallbackHandler")
	if err != nil {
		return nil, err
	}
	return &Safel2contractChangedFallbackHandlerIterator{contract: _Safel2contract.contract, event: "ChangedFallbackHandler", logs: logs, sub: sub}, nil
}

// WatchChangedFallbackHandler is a free log subscription operation binding the contract event 0x5ac6c46c93c8d0e53714ba3b53db3e7c046da994313d7ed0d192028bc7c228b0.
//
// Solidity: event ChangedFallbackHandler(address handler)
func (_Safel2contract *Safel2contractFilterer) WatchChangedFallbackHandler(opts *bind.WatchOpts, sink chan<- *Safel2contractChangedFallbackHandler) (event.Subscription, error) {

	logs, sub, err := _Safel2contract.contract.WatchLogs(opts, "ChangedFallbackHandler")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Safel2contractChangedFallbackHandler)
				if err := _Safel2contract.contract.UnpackLog(event, "ChangedFallbackHandler", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChangedFallbackHandler is a log parse operation binding the contract event 0x5ac6c46c93c8d0e53714ba3b53db3e7c046da994313d7ed0d192028bc7c228b0.
//
// Solidity: event ChangedFallbackHandler(address handler)
func (_Safel2contract *Safel2contractFilterer) ParseChangedFallbackHandler(log types.Log) (*Safel2contractChangedFallbackHandler, error) {
	event := new(Safel2contractChangedFallbackHandler)
	if err := _Safel2contract.contract.UnpackLog(event, "ChangedFallbackHandler", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Safel2contractChangedGuardIterator is returned from FilterChangedGuard and is used to iterate over the raw logs and unpacked data for ChangedGuard events raised by the Safel2contract contract.
type Safel2contractChangedGuardIterator struct {
	Event *Safel2contractChangedGuard // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Safel2contractChangedGuardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Safel2contractChangedGuard)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Safel2contractChangedGuard)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Safel2contractChangedGuardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Safel2contractChangedGuardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Safel2contractChangedGuard represents a ChangedGuard event raised by the Safel2contract contract.
type Safel2contractChangedGuard struct {
	Guard common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterChangedGuard is a free log retrieval operation binding the contract event 0x1151116914515bc0891ff9047a6cb32cf902546f83066499bcf8ba33d2353fa2.
//
// Solidity: event ChangedGuard(address guard)
func (_Safel2contract *Safel2contractFilterer) FilterChangedGuard(opts *bind.FilterOpts) (*Safel2contractChangedGuardIterator, error) {

	logs, sub, err := _Safel2contract.contract.FilterLogs(opts, "ChangedGuard")
	if err != nil {
		return nil, err
	}
	return &Safel2contractChangedGuardIterator{contract: _Safel2contract.contract, event: "ChangedGuard", logs: logs, sub: sub}, nil
}

// WatchChangedGuard is a free log subscription operation binding the contract event 0x1151116914515bc0891ff9047a6cb32cf902546f83066499bcf8ba33d2353fa2.
//
// Solidity: event ChangedGuard(address guard)
func (_Safel2contract *Safel2contractFilterer) WatchChangedGuard(opts *bind.WatchOpts, sink chan<- *Safel2contractChangedGuard) (event.Subscription, error) {

	logs, sub, err := _Safel2contract.contract.WatchLogs(opts, "ChangedGuard")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Safel2contractChangedGuard)
				if err := _Safel2contract.contract.UnpackLog(event, "ChangedGuard", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChangedGuard is a log parse operation binding the contract event 0x1151116914515bc0891ff9047a6cb32cf902546f83066499bcf8ba33d2353fa2.
//
// Solidity: event ChangedGuard(address guard)
func (_Safel2contract *Safel2contractFilterer) ParseChangedGuard(log types.Log) (*Safel2contractChangedGuard, error) {
	event := new(Safel2contractChangedGuard)
	if err := _Safel2contract.contract.UnpackLog(event, "ChangedGuard", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Safel2contractChangedThresholdIterator is returned from FilterChangedThreshold and is used to iterate over the raw logs and unpacked data for ChangedThreshold events raised by the Safel2contract contract.
type Safel2contractChangedThresholdIterator struct {
	Event *Safel2contractChangedThreshold // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Safel2contractChangedThresholdIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Safel2contractChangedThreshold)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Safel2contractChangedThreshold)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Safel2contractChangedThresholdIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Safel2contractChangedThresholdIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Safel2contractChangedThreshold represents a ChangedThreshold event raised by the Safel2contract contract.
type Safel2contractChangedThreshold struct {
	Threshold *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterChangedThreshold is a free log retrieval operation binding the contract event 0x610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c93.
//
// Solidity: event ChangedThreshold(uint256 threshold)
func (_Safel2contract *Safel2contractFilterer) FilterChangedThreshold(opts *bind.FilterOpts) (*Safel2contractChangedThresholdIterator, error) {

	logs, sub, err := _Safel2contract.contract.FilterLogs(opts, "ChangedThreshold")
	if err != nil {
		return nil, err
	}
	return &Safel2contractChangedThresholdIterator{contract: _Safel2contract.contract, event: "ChangedThreshold", logs: logs, sub: sub}, nil
}

// WatchChangedThreshold is a free log subscription operation binding the contract event 0x610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c93.
//
// Solidity: event ChangedThreshold(uint256 threshold)
func (_Safel2contract *Safel2contractFilterer) WatchChangedThreshold(opts *bind.WatchOpts, sink chan<- *Safel2contractChangedThreshold) (event.Subscription, error) {

	logs, sub, err := _Safel2contract.contract.WatchLogs(opts, "ChangedThreshold")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Safel2contractChangedThreshold)
				if err := _Safel2contract.contract.UnpackLog(event, "ChangedThreshold", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseChangedThreshold is a log parse operation binding the contract event 0x610f7ff2b304ae8903c3de74c60c6ab1f7d6226b3f52c5161905bb5ad4039c93.
//
// Solidity: event ChangedThreshold(uint256 threshold)
func (_Safel2contract *Safel2contractFilterer) ParseChangedThreshold(log types.Log) (*Safel2contractChangedThreshold, error) {
	event := new(Safel2contractChangedThreshold)
	if err := _Safel2contract.contract.UnpackLog(event, "ChangedThreshold", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Safel2contractDisabledModuleIterator is returned from FilterDisabledModule and is used to iterate over the raw logs and unpacked data for DisabledModule events raised by the Safel2contract contract.
type Safel2contractDisabledModuleIterator struct {
	Event *Safel2contractDisabledModule // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Safel2contractDisabledModuleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Safel2contractDisabledModule)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Safel2contractDisabledModule)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Safel2contractDisabledModuleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Safel2contractDisabledModuleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Safel2contractDisabledModule represents a DisabledModule event raised by the Safel2contract contract.
type Safel2contractDisabledModule struct {
	Module common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterDisabledModule is a free log retrieval operation binding the contract event 0xaab4fa2b463f581b2b32cb3b7e3b704b9ce37cc209b5fb4d77e593ace4054276.
//
// Solidity: event DisabledModule(address module)
func (_Safel2contract *Safel2contractFilterer) FilterDisabledModule(opts *bind.FilterOpts) (*Safel2contractDisabledModuleIterator, error) {

	logs, sub, err := _Safel2contract.contract.FilterLogs(opts, "DisabledModule")
	if err != nil {
		return nil, err
	}
	return &Safel2contractDisabledModuleIterator{contract: _Safel2contract.contract, event: "DisabledModule", logs: logs, sub: sub}, nil
}

// WatchDisabledModule is a free log subscription operation binding the contract event 0xaab4fa2b463f581b2b32cb3b7e3b704b9ce37cc209b5fb4d77e593ace4054276.
//
// Solidity: event DisabledModule(address module)
func (_Safel2contract *Safel2contractFilterer) WatchDisabledModule(opts *bind.WatchOpts, sink chan<- *Safel2contractDisabledModule) (event.Subscription, error) {

	logs, sub, err := _Safel2contract.contract.WatchLogs(opts, "DisabledModule")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Safel2contractDisabledModule)
				if err := _Safel2contract.contract.UnpackLog(event, "DisabledModule", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDisabledModule is a log parse operation binding the contract event 0xaab4fa2b463f581b2b32cb3b7e3b704b9ce37cc209b5fb4d77e593ace4054276.
//
// Solidity: event DisabledModule(address module)
func (_Safel2contract *Safel2contractFilterer) ParseDisabledModule(log types.Log) (*Safel2contractDisabledModule, error) {
	event := new(Safel2contractDisabledModule)
	if err := _Safel2contract.contract.UnpackLog(event, "DisabledModule", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Safel2contractEnabledModuleIterator is returned from FilterEnabledModule and is used to iterate over the raw logs and unpacked data for EnabledModule events raised by the Safel2contract contract.
type Safel2contractEnabledModuleIterator struct {
	Event *Safel2contractEnabledModule // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Safel2contractEnabledModuleIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Safel2contractEnabledModule)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Safel2contractEnabledModule)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Safel2contractEnabledModuleIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Safel2contractEnabledModuleIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Safel2contractEnabledModule represents a EnabledModule event raised by the Safel2contract contract.
type Safel2contractEnabledModule struct {
	Module common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterEnabledModule is a free log retrieval operation binding the contract event 0xecdf3a3effea5783a3c4c2140e677577666428d44ed9d474a0b3a4c9943f8440.
//
// Solidity: event EnabledModule(address module)
func (_Safel2contract *Safel2contractFilterer) FilterEnabledModule(opts *bind.FilterOpts) (*Safel2contractEnabledModuleIterator, error) {

	logs, sub, err := _Safel2contract.contract.FilterLogs(opts, "EnabledModule")
	if err != nil {
		return nil, err
	}
	return &Safel2contractEnabledModuleIterator{contract: _Safel2contract.contract, event: "EnabledModule", logs: logs, sub: sub}, nil
}

// WatchEnabledModule is a free log subscription operation binding the contract event 0xecdf3a3effea5783a3c4c2140e677577666428d44ed9d474a0b3a4c9943f8440.
//
// Solidity: event EnabledModule(address module)
func (_Safel2contract *Safel2contractFilterer) WatchEnabledModule(opts *bind.WatchOpts, sink chan<- *Safel2contractEnabledModule) (event.Subscription, error) {

	logs, sub, err := _Safel2contract.contract.WatchLogs(opts, "EnabledModule")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Safel2contractEnabledModule)
				if err := _Safel2contract.contract.UnpackLog(event, "EnabledModule", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseEnabledModule is a log parse operation binding the contract event 0xecdf3a3effea5783a3c4c2140e677577666428d44ed9d474a0b3a4c9943f8440.
//
// Solidity: event EnabledModule(address module)
func (_Safel2contract *Safel2contractFilterer) ParseEnabledModule(log types.Log) (*Safel2contractEnabledModule, error) {
	event := new(Safel2contractEnabledModule)
	if err := _Safel2contract.contract.UnpackLog(event, "EnabledModule", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Safel2contractExecutionFailureIterator is returned from FilterExecutionFailure and is used to iterate over the raw logs and unpacked data for ExecutionFailure events raised by the Safel2contract contract.
type Safel2contractExecutionFailureIterator struct {
	Event *Safel2contractExecutionFailure // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Safel2contractExecutionFailureIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Safel2contractExecutionFailure)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Safel2contractExecutionFailure)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Safel2contractExecutionFailureIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Safel2contractExecutionFailureIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Safel2contractExecutionFailure represents a ExecutionFailure event raised by the Safel2contract contract.
type Safel2contractExecutionFailure struct {
	TxHash  [32]byte
	Payment *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterExecutionFailure is a free log retrieval operation binding the contract event 0x23428b18acfb3ea64b08dc0c1d296ea9c09702c09083ca5272e64d115b687d23.
//
// Solidity: event ExecutionFailure(bytes32 txHash, uint256 payment)
func (_Safel2contract *Safel2contractFilterer) FilterExecutionFailure(opts *bind.FilterOpts) (*Safel2contractExecutionFailureIterator, error) {

	logs, sub, err := _Safel2contract.contract.FilterLogs(opts, "ExecutionFailure")
	if err != nil {
		return nil, err
	}
	return &Safel2contractExecutionFailureIterator{contract: _Safel2contract.contract, event: "ExecutionFailure", logs: logs, sub: sub}, nil
}

// WatchExecutionFailure is a free log subscription operation binding the contract event 0x23428b18acfb3ea64b08dc0c1d296ea9c09702c09083ca5272e64d115b687d23.
//
// Solidity: event ExecutionFailure(bytes32 txHash, uint256 payment)
func (_Safel2contract *Safel2contractFilterer) WatchExecutionFailure(opts *bind.WatchOpts, sink chan<- *Safel2contractExecutionFailure) (event.Subscription, error) {

	logs, sub, err := _Safel2contract.contract.WatchLogs(opts, "ExecutionFailure")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Safel2contractExecutionFailure)
				if err := _Safel2contract.contract.UnpackLog(event, "ExecutionFailure", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecutionFailure is a log parse operation binding the contract event 0x23428b18acfb3ea64b08dc0c1d296ea9c09702c09083ca5272e64d115b687d23.
//
// Solidity: event ExecutionFailure(bytes32 txHash, uint256 payment)
func (_Safel2contract *Safel2contractFilterer) ParseExecutionFailure(log types.Log) (*Safel2contractExecutionFailure, error) {
	event := new(Safel2contractExecutionFailure)
	if err := _Safel2contract.contract.UnpackLog(event, "ExecutionFailure", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Safel2contractExecutionFromModuleFailureIterator is returned from FilterExecutionFromModuleFailure and is used to iterate over the raw logs and unpacked data for ExecutionFromModuleFailure events raised by the Safel2contract contract.
type Safel2contractExecutionFromModuleFailureIterator struct {
	Event *Safel2contractExecutionFromModuleFailure // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Safel2contractExecutionFromModuleFailureIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Safel2contractExecutionFromModuleFailure)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Safel2contractExecutionFromModuleFailure)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Safel2contractExecutionFromModuleFailureIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Safel2contractExecutionFromModuleFailureIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Safel2contractExecutionFromModuleFailure represents a ExecutionFromModuleFailure event raised by the Safel2contract contract.
type Safel2contractExecutionFromModuleFailure struct {
	Module common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterExecutionFromModuleFailure is a free log retrieval operation binding the contract event 0xacd2c8702804128fdb0db2bb49f6d127dd0181c13fd45dbfe16de0930e2bd375.
//
// Solidity: event ExecutionFromModuleFailure(address indexed module)
func (_Safel2contract *Safel2contractFilterer) FilterExecutionFromModuleFailure(opts *bind.FilterOpts, module []common.Address) (*Safel2contractExecutionFromModuleFailureIterator, error) {

	var moduleRule []interface{}
	for _, moduleItem := range module {
		moduleRule = append(moduleRule, moduleItem)
	}

	logs, sub, err := _Safel2contract.contract.FilterLogs(opts, "ExecutionFromModuleFailure", moduleRule)
	if err != nil {
		return nil, err
	}
	return &Safel2contractExecutionFromModuleFailureIterator{contract: _Safel2contract.contract, event: "ExecutionFromModuleFailure", logs: logs, sub: sub}, nil
}

// WatchExecutionFromModuleFailure is a free log subscription operation binding the contract event 0xacd2c8702804128fdb0db2bb49f6d127dd0181c13fd45dbfe16de0930e2bd375.
//
// Solidity: event ExecutionFromModuleFailure(address indexed module)
func (_Safel2contract *Safel2contractFilterer) WatchExecutionFromModuleFailure(opts *bind.WatchOpts, sink chan<- *Safel2contractExecutionFromModuleFailure, module []common.Address) (event.Subscription, error) {

	var moduleRule []interface{}
	for _, moduleItem := range module {
		moduleRule = append(moduleRule, moduleItem)
	}

	logs, sub, err := _Safel2contract.contract.WatchLogs(opts, "ExecutionFromModuleFailure", moduleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Safel2contractExecutionFromModuleFailure)
				if err := _Safel2contract.contract.UnpackLog(event, "ExecutionFromModuleFailure", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecutionFromModuleFailure is a log parse operation binding the contract event 0xacd2c8702804128fdb0db2bb49f6d127dd0181c13fd45dbfe16de0930e2bd375.
//
// Solidity: event ExecutionFromModuleFailure(address indexed module)
func (_Safel2contract *Safel2contractFilterer) ParseExecutionFromModuleFailure(log types.Log) (*Safel2contractExecutionFromModuleFailure, error) {
	event := new(Safel2contractExecutionFromModuleFailure)
	if err := _Safel2contract.contract.UnpackLog(event, "ExecutionFromModuleFailure", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Safel2contractExecutionFromModuleSuccessIterator is returned from FilterExecutionFromModuleSuccess and is used to iterate over the raw logs and unpacked data for ExecutionFromModuleSuccess events raised by the Safel2contract contract.
type Safel2contractExecutionFromModuleSuccessIterator struct {
	Event *Safel2contractExecutionFromModuleSuccess // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Safel2contractExecutionFromModuleSuccessIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Safel2contractExecutionFromModuleSuccess)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Safel2contractExecutionFromModuleSuccess)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Safel2contractExecutionFromModuleSuccessIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Safel2contractExecutionFromModuleSuccessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Safel2contractExecutionFromModuleSuccess represents a ExecutionFromModuleSuccess event raised by the Safel2contract contract.
type Safel2contractExecutionFromModuleSuccess struct {
	Module common.Address
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterExecutionFromModuleSuccess is a free log retrieval operation binding the contract event 0x6895c13664aa4f67288b25d7a21d7aaa34916e355fb9b6fae0a139a9085becb8.
//
// Solidity: event ExecutionFromModuleSuccess(address indexed module)
func (_Safel2contract *Safel2contractFilterer) FilterExecutionFromModuleSuccess(opts *bind.FilterOpts, module []common.Address) (*Safel2contractExecutionFromModuleSuccessIterator, error) {

	var moduleRule []interface{}
	for _, moduleItem := range module {
		moduleRule = append(moduleRule, moduleItem)
	}

	logs, sub, err := _Safel2contract.contract.FilterLogs(opts, "ExecutionFromModuleSuccess", moduleRule)
	if err != nil {
		return nil, err
	}
	return &Safel2contractExecutionFromModuleSuccessIterator{contract: _Safel2contract.contract, event: "ExecutionFromModuleSuccess", logs: logs, sub: sub}, nil
}

// WatchExecutionFromModuleSuccess is a free log subscription operation binding the contract event 0x6895c13664aa4f67288b25d7a21d7aaa34916e355fb9b6fae0a139a9085becb8.
//
// Solidity: event ExecutionFromModuleSuccess(address indexed module)
func (_Safel2contract *Safel2contractFilterer) WatchExecutionFromModuleSuccess(opts *bind.WatchOpts, sink chan<- *Safel2contractExecutionFromModuleSuccess, module []common.Address) (event.Subscription, error) {

	var moduleRule []interface{}
	for _, moduleItem := range module {
		moduleRule = append(moduleRule, moduleItem)
	}

	logs, sub, err := _Safel2contract.contract.WatchLogs(opts, "ExecutionFromModuleSuccess", moduleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Safel2contractExecutionFromModuleSuccess)
				if err := _Safel2contract.contract.UnpackLog(event, "ExecutionFromModuleSuccess", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecutionFromModuleSuccess is a log parse operation binding the contract event 0x6895c13664aa4f67288b25d7a21d7aaa34916e355fb9b6fae0a139a9085becb8.
//
// Solidity: event ExecutionFromModuleSuccess(address indexed module)
func (_Safel2contract *Safel2contractFilterer) ParseExecutionFromModuleSuccess(log types.Log) (*Safel2contractExecutionFromModuleSuccess, error) {
	event := new(Safel2contractExecutionFromModuleSuccess)
	if err := _Safel2contract.contract.UnpackLog(event, "ExecutionFromModuleSuccess", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Safel2contractExecutionSuccessIterator is returned from FilterExecutionSuccess and is used to iterate over the raw logs and unpacked data for ExecutionSuccess events raised by the Safel2contract contract.
type Safel2contractExecutionSuccessIterator struct {
	Event *Safel2contractExecutionSuccess // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Safel2contractExecutionSuccessIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Safel2contractExecutionSuccess)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Safel2contractExecutionSuccess)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Safel2contractExecutionSuccessIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Safel2contractExecutionSuccessIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Safel2contractExecutionSuccess represents a ExecutionSuccess event raised by the Safel2contract contract.
type Safel2contractExecutionSuccess struct {
	TxHash  [32]byte
	Payment *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterExecutionSuccess is a free log retrieval operation binding the contract event 0x442e715f626346e8c54381002da614f62bee8d27386535b2521ec8540898556e.
//
// Solidity: event ExecutionSuccess(bytes32 txHash, uint256 payment)
func (_Safel2contract *Safel2contractFilterer) FilterExecutionSuccess(opts *bind.FilterOpts) (*Safel2contractExecutionSuccessIterator, error) {

	logs, sub, err := _Safel2contract.contract.FilterLogs(opts, "ExecutionSuccess")
	if err != nil {
		return nil, err
	}
	return &Safel2contractExecutionSuccessIterator{contract: _Safel2contract.contract, event: "ExecutionSuccess", logs: logs, sub: sub}, nil
}

// WatchExecutionSuccess is a free log subscription operation binding the contract event 0x442e715f626346e8c54381002da614f62bee8d27386535b2521ec8540898556e.
//
// Solidity: event ExecutionSuccess(bytes32 txHash, uint256 payment)
func (_Safel2contract *Safel2contractFilterer) WatchExecutionSuccess(opts *bind.WatchOpts, sink chan<- *Safel2contractExecutionSuccess) (event.Subscription, error) {

	logs, sub, err := _Safel2contract.contract.WatchLogs(opts, "ExecutionSuccess")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Safel2contractExecutionSuccess)
				if err := _Safel2contract.contract.UnpackLog(event, "ExecutionSuccess", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseExecutionSuccess is a log parse operation binding the contract event 0x442e715f626346e8c54381002da614f62bee8d27386535b2521ec8540898556e.
//
// Solidity: event ExecutionSuccess(bytes32 txHash, uint256 payment)
func (_Safel2contract *Safel2contractFilterer) ParseExecutionSuccess(log types.Log) (*Safel2contractExecutionSuccess, error) {
	event := new(Safel2contractExecutionSuccess)
	if err := _Safel2contract.contract.UnpackLog(event, "ExecutionSuccess", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Safel2contractRemovedOwnerIterator is returned from FilterRemovedOwner and is used to iterate over the raw logs and unpacked data for RemovedOwner events raised by the Safel2contract contract.
type Safel2contractRemovedOwnerIterator struct {
	Event *Safel2contractRemovedOwner // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Safel2contractRemovedOwnerIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Safel2contractRemovedOwner)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Safel2contractRemovedOwner)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Safel2contractRemovedOwnerIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Safel2contractRemovedOwnerIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Safel2contractRemovedOwner represents a RemovedOwner event raised by the Safel2contract contract.
type Safel2contractRemovedOwner struct {
	Owner common.Address
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterRemovedOwner is a free log retrieval operation binding the contract event 0xf8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf.
//
// Solidity: event RemovedOwner(address owner)
func (_Safel2contract *Safel2contractFilterer) FilterRemovedOwner(opts *bind.FilterOpts) (*Safel2contractRemovedOwnerIterator, error) {

	logs, sub, err := _Safel2contract.contract.FilterLogs(opts, "RemovedOwner")
	if err != nil {
		return nil, err
	}
	return &Safel2contractRemovedOwnerIterator{contract: _Safel2contract.contract, event: "RemovedOwner", logs: logs, sub: sub}, nil
}

// WatchRemovedOwner is a free log subscription operation binding the contract event 0xf8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf.
//
// Solidity: event RemovedOwner(address owner)
func (_Safel2contract *Safel2contractFilterer) WatchRemovedOwner(opts *bind.WatchOpts, sink chan<- *Safel2contractRemovedOwner) (event.Subscription, error) {

	logs, sub, err := _Safel2contract.contract.WatchLogs(opts, "RemovedOwner")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Safel2contractRemovedOwner)
				if err := _Safel2contract.contract.UnpackLog(event, "RemovedOwner", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRemovedOwner is a log parse operation binding the contract event 0xf8d49fc529812e9a7c5c50e69c20f0dccc0db8fa95c98bc58cc9a4f1c1299eaf.
//
// Solidity: event RemovedOwner(address owner)
func (_Safel2contract *Safel2contractFilterer) ParseRemovedOwner(log types.Log) (*Safel2contractRemovedOwner, error) {
	event := new(Safel2contractRemovedOwner)
	if err := _Safel2contract.contract.UnpackLog(event, "RemovedOwner", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Safel2contractSafeModuleTransactionIterator is returned from FilterSafeModuleTransaction and is used to iterate over the raw logs and unpacked data for SafeModuleTransaction events raised by the Safel2contract contract.
type Safel2contractSafeModuleTransactionIterator struct {
	Event *Safel2contractSafeModuleTransaction // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Safel2contractSafeModuleTransactionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Safel2contractSafeModuleTransaction)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Safel2contractSafeModuleTransaction)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Safel2contractSafeModuleTransactionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Safel2contractSafeModuleTransactionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Safel2contractSafeModuleTransaction represents a SafeModuleTransaction event raised by the Safel2contract contract.
type Safel2contractSafeModuleTransaction struct {
	Module    common.Address
	To        common.Address
	Value     *big.Int
	Data      []byte
	Operation uint8
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterSafeModuleTransaction is a free log retrieval operation binding the contract event 0xb648d3644f584ed1c2232d53c46d87e693586486ad0d1175f8656013110b714e.
//
// Solidity: event SafeModuleTransaction(address module, address to, uint256 value, bytes data, uint8 operation)
func (_Safel2contract *Safel2contractFilterer) FilterSafeModuleTransaction(opts *bind.FilterOpts) (*Safel2contractSafeModuleTransactionIterator, error) {

	logs, sub, err := _Safel2contract.contract.FilterLogs(opts, "SafeModuleTransaction")
	if err != nil {
		return nil, err
	}
	return &Safel2contractSafeModuleTransactionIterator{contract: _Safel2contract.contract, event: "SafeModuleTransaction", logs: logs, sub: sub}, nil
}

// WatchSafeModuleTransaction is a free log subscription operation binding the contract event 0xb648d3644f584ed1c2232d53c46d87e693586486ad0d1175f8656013110b714e.
//
// Solidity: event SafeModuleTransaction(address module, address to, uint256 value, bytes data, uint8 operation)
func (_Safel2contract *Safel2contractFilterer) WatchSafeModuleTransaction(opts *bind.WatchOpts, sink chan<- *Safel2contractSafeModuleTransaction) (event.Subscription, error) {

	logs, sub, err := _Safel2contract.contract.WatchLogs(opts, "SafeModuleTransaction")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Safel2contractSafeModuleTransaction)
				if err := _Safel2contract.contract.UnpackLog(event, "SafeModuleTransaction", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSafeModuleTransaction is a log parse operation binding the contract event 0xb648d3644f584ed1c2232d53c46d87e693586486ad0d1175f8656013110b714e.
//
// Solidity: event SafeModuleTransaction(address module, address to, uint256 value, bytes data, uint8 operation)
func (_Safel2contract *Safel2contractFilterer) ParseSafeModuleTransaction(log types.Log) (*Safel2contractSafeModuleTransaction, error) {
	event := new(Safel2contractSafeModuleTransaction)
	if err := _Safel2contract.contract.UnpackLog(event, "SafeModuleTransaction", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Safel2contractSafeMultiSigTransactionIterator is returned from FilterSafeMultiSigTransaction and is used to iterate over the raw logs and unpacked data for SafeMultiSigTransaction events raised by the Safel2contract contract.
type Safel2contractSafeMultiSigTransactionIterator struct {
	Event *Safel2contractSafeMultiSigTransaction // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Safel2contractSafeMultiSigTransactionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Safel2contractSafeMultiSigTransaction)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Safel2contractSafeMultiSigTransaction)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Safel2contractSafeMultiSigTransactionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Safel2contractSafeMultiSigTransactionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Safel2contractSafeMultiSigTransaction represents a SafeMultiSigTransaction event raised by the Safel2contract contract.
type Safel2contractSafeMultiSigTransaction struct {
	To             common.Address
	Value          *big.Int
	Data           []byte
	Operation      uint8
	SafeTxGas      *big.Int
	BaseGas        *big.Int
	GasPrice       *big.Int
	GasToken       common.Address
	RefundReceiver common.Address
	Signatures     []byte
	AdditionalInfo []byte
	Raw            types.Log // Blockchain specific contextual infos
}

// FilterSafeMultiSigTransaction is a free log retrieval operation binding the contract event 0x66753cd2356569ee081232e3be8909b950e0a76c1f8460c3a5e3c2be32b11bed.
//
// Solidity: event SafeMultiSigTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures, bytes additionalInfo)
func (_Safel2contract *Safel2contractFilterer) FilterSafeMultiSigTransaction(opts *bind.FilterOpts) (*Safel2contractSafeMultiSigTransactionIterator, error) {

	logs, sub, err := _Safel2contract.contract.FilterLogs(opts, "SafeMultiSigTransaction")
	if err != nil {
		return nil, err
	}
	return &Safel2contractSafeMultiSigTransactionIterator{contract: _Safel2contract.contract, event: "SafeMultiSigTransaction", logs: logs, sub: sub}, nil
}

// WatchSafeMultiSigTransaction is a free log subscription operation binding the contract event 0x66753cd2356569ee081232e3be8909b950e0a76c1f8460c3a5e3c2be32b11bed.
//
// Solidity: event SafeMultiSigTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures, bytes additionalInfo)
func (_Safel2contract *Safel2contractFilterer) WatchSafeMultiSigTransaction(opts *bind.WatchOpts, sink chan<- *Safel2contractSafeMultiSigTransaction) (event.Subscription, error) {

	logs, sub, err := _Safel2contract.contract.WatchLogs(opts, "SafeMultiSigTransaction")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Safel2contractSafeMultiSigTransaction)
				if err := _Safel2contract.contract.UnpackLog(event, "SafeMultiSigTransaction", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSafeMultiSigTransaction is a log parse operation binding the contract event 0x66753cd2356569ee081232e3be8909b950e0a76c1f8460c3a5e3c2be32b11bed.
//
// Solidity: event SafeMultiSigTransaction(address to, uint256 value, bytes data, uint8 operation, uint256 safeTxGas, uint256 baseGas, uint256 gasPrice, address gasToken, address refundReceiver, bytes signatures, bytes additionalInfo)
func (_Safel2contract *Safel2contractFilterer) ParseSafeMultiSigTransaction(log types.Log) (*Safel2contractSafeMultiSigTransaction, error) {
	event := new(Safel2contractSafeMultiSigTransaction)
	if err := _Safel2contract.contract.UnpackLog(event, "SafeMultiSigTransaction", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Safel2contractSafeReceivedIterator is returned from FilterSafeReceived and is used to iterate over the raw logs and unpacked data for SafeReceived events raised by the Safel2contract contract.
type Safel2contractSafeReceivedIterator struct {
	Event *Safel2contractSafeReceived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Safel2contractSafeReceivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Safel2contractSafeReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Safel2contractSafeReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Safel2contractSafeReceivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Safel2contractSafeReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Safel2contractSafeReceived represents a SafeReceived event raised by the Safel2contract contract.
type Safel2contractSafeReceived struct {
	Sender common.Address
	Value  *big.Int
	Raw    types.Log // Blockchain specific contextual infos
}

// FilterSafeReceived is a free log retrieval operation binding the contract event 0x3d0ce9bfc3ed7d6862dbb28b2dea94561fe714a1b4d019aa8af39730d1ad7c3d.
//
// Solidity: event SafeReceived(address indexed sender, uint256 value)
func (_Safel2contract *Safel2contractFilterer) FilterSafeReceived(opts *bind.FilterOpts, sender []common.Address) (*Safel2contractSafeReceivedIterator, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Safel2contract.contract.FilterLogs(opts, "SafeReceived", senderRule)
	if err != nil {
		return nil, err
	}
	return &Safel2contractSafeReceivedIterator{contract: _Safel2contract.contract, event: "SafeReceived", logs: logs, sub: sub}, nil
}

// WatchSafeReceived is a free log subscription operation binding the contract event 0x3d0ce9bfc3ed7d6862dbb28b2dea94561fe714a1b4d019aa8af39730d1ad7c3d.
//
// Solidity: event SafeReceived(address indexed sender, uint256 value)
func (_Safel2contract *Safel2contractFilterer) WatchSafeReceived(opts *bind.WatchOpts, sink chan<- *Safel2contractSafeReceived, sender []common.Address) (event.Subscription, error) {

	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _Safel2contract.contract.WatchLogs(opts, "SafeReceived", senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Safel2contractSafeReceived)
				if err := _Safel2contract.contract.UnpackLog(event, "SafeReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSafeReceived is a log parse operation binding the contract event 0x3d0ce9bfc3ed7d6862dbb28b2dea94561fe714a1b4d019aa8af39730d1ad7c3d.
//
// Solidity: event SafeReceived(address indexed sender, uint256 value)
func (_Safel2contract *Safel2contractFilterer) ParseSafeReceived(log types.Log) (*Safel2contractSafeReceived, error) {
	event := new(Safel2contractSafeReceived)
	if err := _Safel2contract.contract.UnpackLog(event, "SafeReceived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Safel2contractSafeSetupIterator is returned from FilterSafeSetup and is used to iterate over the raw logs and unpacked data for SafeSetup events raised by the Safel2contract contract.
type Safel2contractSafeSetupIterator struct {
	Event *Safel2contractSafeSetup // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Safel2contractSafeSetupIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Safel2contractSafeSetup)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Safel2contractSafeSetup)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Safel2contractSafeSetupIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Safel2contractSafeSetupIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Safel2contractSafeSetup represents a SafeSetup event raised by the Safel2contract contract.
type Safel2contractSafeSetup struct {
	Initiator       common.Address
	Owners          []common.Address
	Threshold       *big.Int
	Initializer     common.Address
	FallbackHandler common.Address
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterSafeSetup is a free log retrieval operation binding the contract event 0x141df868a6331af528e38c83b7aa03edc19be66e37ae67f9285bf4f8e3c6a1a8.
//
// Solidity: event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)
func (_Safel2contract *Safel2contractFilterer) FilterSafeSetup(opts *bind.FilterOpts, initiator []common.Address) (*Safel2contractSafeSetupIterator, error) {

	var initiatorRule []interface{}
	for _, initiatorItem := range initiator {
		initiatorRule = append(initiatorRule, initiatorItem)
	}

	logs, sub, err := _Safel2contract.contract.FilterLogs(opts, "SafeSetup", initiatorRule)
	if err != nil {
		return nil, err
	}
	return &Safel2contractSafeSetupIterator{contract: _Safel2contract.contract, event: "SafeSetup", logs: logs, sub: sub}, nil
}

// WatchSafeSetup is a free log subscription operation binding the contract event 0x141df868a6331af528e38c83b7aa03edc19be66e37ae67f9285bf4f8e3c6a1a8.
//
// Solidity: event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)
func (_Safel2contract *Safel2contractFilterer) WatchSafeSetup(opts *bind.WatchOpts, sink chan<- *Safel2contractSafeSetup, initiator []common.Address) (event.Subscription, error) {

	var initiatorRule []interface{}
	for _, initiatorItem := range initiator {
		initiatorRule = append(initiatorRule, initiatorItem)
	}

	logs, sub, err := _Safel2contract.contract.WatchLogs(opts, "SafeSetup", initiatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Safel2contractSafeSetup)
				if err := _Safel2contract.contract.UnpackLog(event, "SafeSetup", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSafeSetup is a log parse operation binding the contract event 0x141df868a6331af528e38c83b7aa03edc19be66e37ae67f9285bf4f8e3c6a1a8.
//
// Solidity: event SafeSetup(address indexed initiator, address[] owners, uint256 threshold, address initializer, address fallbackHandler)
func (_Safel2contract *Safel2contractFilterer) ParseSafeSetup(log types.Log) (*Safel2contractSafeSetup, error) {
	event := new(Safel2contractSafeSetup)
	if err := _Safel2contract.contract.UnpackLog(event, "SafeSetup", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// Safel2contractSignMsgIterator is returned from FilterSignMsg and is used to iterate over the raw logs and unpacked data for SignMsg events raised by the Safel2contract contract.
type Safel2contractSignMsgIterator struct {
	Event *Safel2contractSignMsg // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *Safel2contractSignMsgIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(Safel2contractSignMsg)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(Safel2contractSignMsg)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *Safel2contractSignMsgIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *Safel2contractSignMsgIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// Safel2contractSignMsg represents a SignMsg event raised by the Safel2contract contract.
type Safel2contractSignMsg struct {
	MsgHash [32]byte
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterSignMsg is a free log retrieval operation binding the contract event 0xe7f4675038f4f6034dfcbbb24c4dc08e4ebf10eb9d257d3d02c0f38d122ac6e4.
//
// Solidity: event SignMsg(bytes32 indexed msgHash)
func (_Safel2contract *Safel2contractFilterer) FilterSignMsg(opts *bind.FilterOpts, msgHash [][32]byte) (*Safel2contractSignMsgIterator, error) {

	var msgHashRule []interface{}
	for _, msgHashItem := range msgHash {
		msgHashRule = append(msgHashRule, msgHashItem)
	}

	logs, sub, err := _Safel2contract.contract.FilterLogs(opts, "SignMsg", msgHashRule)
	if err != nil {
		return nil, err
	}
	return &Safel2contractSignMsgIterator{contract: _Safel2contract.contract, event: "SignMsg", logs: logs, sub: sub}, nil
}

// WatchSignMsg is a free log subscription operation binding the contract event 0xe7f4675038f4f6034dfcbbb24c4dc08e4ebf10eb9d257d3d02c0f38d122ac6e4.
//
// Solidity: event SignMsg(bytes32 indexed msgHash)
func (_Safel2contract *Safel2contractFilterer) WatchSignMsg(opts *bind.WatchOpts, sink chan<- *Safel2contractSignMsg, msgHash [][32]byte) (event.Subscription, error) {

	var msgHashRule []interface{}
	for _, msgHashItem := range msgHash {
		msgHashRule = append(msgHashRule, msgHashItem)
	}

	logs, sub, err := _Safel2contract.contract.WatchLogs(opts, "SignMsg", msgHashRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(Safel2contractSignMsg)
				if err := _Safel2contract.contract.UnpackLog(event, "SignMsg", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseSignMsg is a log parse operation binding the contract event 0xe7f4675038f4f6034dfcbbb24c4dc08e4ebf10eb9d257d3d02c0f38d122ac6e4.
//
// Solidity: event SignMsg(bytes32 indexed msgHash)
func (_Safel2contract *Safel2contractFilterer) ParseSignMsg(log types.Log) (*Safel2contractSignMsg, error) {
	event := new(Safel2contractSignMsg)
	if err := _Safel2contract.contract.UnpackLog(event, "SignMsg", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
